Overture/cg git cheat-sheet: 
----------------------------

(0) You need an account on sourceforge.net and then I can give you 
   access to the repo's.

------------------------------------------------------------------------------------------------
(1) To checkout (clone) the Overture and cg repos from sourceforge.net : 

   git clone ssh://wdhenshaw@git.code.sf.net/p/overtureframework/code overtureFramework

(replace wdhenshaw by your sourceforge username, the final argument can
be any directory name you like).  This works from the LC CZ machines.


Note that with git you get a complete and independent copy (clone) of
the git repo (in the overtureFramework/.git directory) and all the
checked out files in overtureFramework/Overture and
overtureFramework/cg (called the working tree).

------------------------------------------------------------------------------------------------
(2) After adding or changing a file:

(2.1) To store changes in the "staging area" use

    git add <file>
    git add -u -v   (add any modified files and print those that have changed)
    git add --dry-run -u -v

(2.2) To commit the staging area to the (local) git repo:

   git commit -m"My message here"

(2.3) To push (i.e save) files from your local repo (origin)
to the master sourceforge repo:

   git push origin master 


(2.4) To get new files from the master sourceforge repo:

   git pull --rebase

(There is also a 'git fetch' which allows you to look at the
master files before actually deciding to update your repo with
the master versions). 

(2.5) To view the status of your files (untracked, unmodfied, modified, staged)
  git status 
  git status --untracked-files=no
  git status -s 

(2.6) Restore a deleted file
   git checkout fileName

(2.7) Differences:

     git diff
     git diff --cached
     git diff HEAD
     git diff --stat

(2.8) Checkout:
      git checkout fileName

(2.9) Aliases: here are aliases I use: 

alias gita 'git add -u -v .'
alias gitc 'git commit -m"wdh"'
alias gits 'git status --untracked-files=no'
alias gitpush 'git push origin master'
alias gitpull 'git pull --rebase'

(2.10) Use git fetch to copy the files from the master repo to store locally in a copy
    of the master (remote-tracking branch) but do NOT merge with your local branch. 
    (git pull = git-fetch + git-merge). Do a ftech if you want to see differences
    between your branch and the master version.


    See discussion in 
        https://www.atlassian.com/git/tutorials/syncing/git-remote

    The git fetch command imports commits from a remote repository into your local repo. The
    resulting commits are stored as remote branches instead of the normal local branches that weâ€™ve
    been working with. This gives you a chance to review changes before integrating them into your
    copy of the project.


------------------------------------------------------------------------------------------------
(3) To build a version of Overture from the git repo:

  (3.1) Set the name of the directory where Overture will be built. For example,
      I use the following (.g stands for debug version)

      setenv OvertureBuild $HOME/Overture.g 

  (3.2) Create the distribution:
      cd overtureFramework/Overture
      buildOverture

     This will make a copy of the Overture distribution in the directory $OvertureBuild.

  (3.3) Set your Overture environmental variables and then compile Overture:

      cd $OvertureBuild
      configure
      make -j4 

  (3.4) To build cg, set the CG and CGBUILDPREFIX env variables then:

         cd overtureFramework/cg
         make -j4

         This will compile the CG files in the directory $CGBUILDPREFIX
