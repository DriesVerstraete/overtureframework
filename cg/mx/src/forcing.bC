#include "Maxwell.h"
#include "CompositeGridOperators.h"
#include "display.h"
#include "UnstructuredMapping.h"
#include "OGPolyFunction.h"
#include "OGTrigFunction.h"
#include "OGPulseFunction.h"
#include "interpPoints.h"
#include "ShowFileReader.h"
#include "ParallelUtility.h"
#include "App.h"

#define forcingOptMaxwell EXTERN_C_NAME(forcingoptmaxwell)
#define ogf EXTERN_C_NAME(ogf)
#define ogf2d EXTERN_C_NAME(ogf2d)
#define ogderiv EXTERN_C_NAME(ogderiv)
#define ogderiv3 EXTERN_C_NAME(ogderiv3)
#define ogf3d EXTERN_C_NAME(ogf3d)
#define exx EXTERN_C_NAME(exx)

extern "C"
{
  void forcingOptMaxwell(const int&nd,
      const int&nd1a,const int&nd1b,const int&nd2a,const int&nd2b,const int&nd3a,const int&nd3b,
      const int&ndf1a,const int&ndf1b,const int&ndf2a,const int&ndf2b,const int&ndf3a,const int&ndf3b,
      real&u, const real&f, const int&mask, const real&rx, const real&x,  
      const int&ipar, const real&rpar, int&ierr );
}



extern "C"
{

/* Here are functions for TZ flow that can be called from fortran */



real
ogf(OGFunction *&ep, const real &x, const real &y,const real &z, const int & c, const real & t )
{
  return (*ep)(x,y,z,c,t);
}


/* return (u,v,w) = (Ex,Ey,Hz) */
void
ogf2d(OGFunction *&ep, const real &x, const real &y, const real & t, real & u, real & v, real & w )
{
  /* assumes ex=0, ey=1, hz=2 */
  u=(*ep)(x,y,0.,0,t);
  v=(*ep)(x,y,0.,1,t);
  w=(*ep)(x,y,0.,2,t);
}

/* return a general derivative */
void
ogderiv(OGFunction *&ep, const int & ntd, const int & nxd, const int & nyd, const int & nzd, 
         const real &x, const real &y, const real &z, const real & t, const int & n, real & ud )
{
  ud=(*ep).gd(ntd,nxd,nyd,nzd,x,y,z,n,t);
}

/* return a general derivative for 3 components */
void
ogderiv3(OGFunction *&ep, const int & ntd, const int & nxd, const int & nyd, const int & nzd, 
         const real &x, const real &y, const real &z, const real & t, 
         const int & n1, real & ud1, const int & n2, real & ud2, const int & n3, real & ud3 )
{
  ud1=(*ep).gd(ntd,nxd,nyd,nzd,x,y,z,n1,t);
  ud2=(*ep).gd(ntd,nxd,nyd,nzd,x,y,z,n2,t);
  ud3=(*ep).gd(ntd,nxd,nyd,nzd,x,y,z,n3,t);
}

/* return (u,v,w) = (Ex,Ey,Ez) */
void
ogf3d(OGFunction *&ep, const real &x, const real &y, const real &z, const real & t, real & u, real & v, real & w )
{
  /* assumes ex=0, ey=1, hz=2 */
  u=(*ep)(x,y,z,0,t);
  v=(*ep)(x,y,z,1,t);
  w=(*ep)(x,y,z,2,t);
}

real
exx(OGFunction *&ep, const real &x, const real &y,const real &z, const int & c, const real & t )
{
  real value=(*ep).xx(x,y,z,c,t);
  // printF("exx: x=(%8.2e,%8.2e,%8.2e) c=%i t=%8.2e ...exx=%8.2e \n",x,y,z,c,t,value);
  return value;
}

}


#define FOR_3D(i1,i2,i3,I1,I2,I3) \
int I1Base =I1.getBase(),   I2Base =I2.getBase(),  I3Base =I3.getBase();  \
int I1Bound=I1.getBound(),  I2Bound=I2.getBound(), I3Bound=I3.getBound(); \
for(i3=I3Base; i3<=I3Bound; i3++) \
for(i2=I2Base; i2<=I2Bound; i2++) \
for(i1=I1Base; i1<=I1Bound; i1++)

#define FOR_3(i1,i2,i3,I1,I2,I3) \
I1Base =I1.getBase(),   I2Base =I2.getBase(),  I3Base =I3.getBase();  \
I1Bound=I1.getBound(),  I2Bound=I2.getBound(), I3Bound=I3.getBound(); \
for(i3=I3Base; i3<=I3Bound; i3++) \
for(i2=I2Base; i2<=I2Bound; i2++) \
for(i1=I1Base; i1<=I1Bound; i1++)

// Define macros for forcing functions:
#Include "forcing.h"
#Include "annulusEigenFunction.h"

// Gaussian pulse initial conditions:
// #Include "gaussianPulse.h"


#beginMacro forcingLoops2D(e1)
 J1 = Range(max(Ie1.getBase(),uel.getBase(0)),min(Ie1.getBound(),uel.getBound(0)));
 J2 = Range(max(Ie2.getBase(),uel.getBase(1)),min(Ie2.getBound(),uel.getBound(1)));
 J3 = Range(max(Ie3.getBase(),uel.getBase(2)),min(Ie3.getBound(),uel.getBound(2)));
 FOR_3D(i1,i2,i3,J1,J2,J3)
 {
   x0 = XEP(i1,i2,i3,0);
   y0 = XEP(i1,i2,i3,1);
   #undef CC
   #define CC ex
   U ## e1
   #undef CC
   #define CC ey
   U ## e1
 }
 J1 = Range(max(Ih1.getBase(),uhl.getBase(0)),min(Ih1.getBound(),uhl.getBound(0)));
 J2 = Range(max(Ih2.getBase(),uhl.getBase(1)),min(Ih2.getBound(),uhl.getBound(1)));
 J3 = Range(max(Ih3.getBase(),uhl.getBase(2)),min(Ih3.getBound(),uhl.getBound(2)));
 FOR_3(i1,i2,i3,J1,J2,J3)
 {
   x0 = XHP(i1,i2,i3,0);
   y0 = XHP(i1,i2,i3,1);

   #undef CC
   #define CC hz
   U ## e1
 }
#endMacro

#beginMacro forcingLoops3D(e1)
 J1 = Range(max(Ie1.getBase(),uel.getBase(0)),min(Ie1.getBound(),uel.getBound(0)));
 J2 = Range(max(Ie2.getBase(),uel.getBase(1)),min(Ie2.getBound(),uel.getBound(1)));
 J3 = Range(max(Ie3.getBase(),uel.getBase(2)),min(Ie3.getBound(),uel.getBound(2)));

 FOR_3D(i1,i2,i3,J1,J2,J3)
 {
   x0 = XEP(i1,i2,i3,0);
   y0 = XEP(i1,i2,i3,1);
   z0 = XEP(i1,i2,i3,2);
   #undef CC
   #define CC ex
   U ## e1
   #undef CC
   #define CC ey
   U ## e1
   #undef CC
   #define CC ez
   U ## e1
   #undef CC
 }
#endMacro

#beginMacro forcingLoops2DS( assgn )
if ( (option==0 || option==1 ) )
{
 J1 = Range(max(Ie1.getBase(),uel.getBase(0)),min(Ie1.getBound(),uel.getBound(0)));
 J2 = Range(max(Ie2.getBase(),uel.getBase(1)),min(Ie2.getBound(),uel.getBound(1)));
 J3 = Range(max(Ie3.getBase(),uel.getBase(2)),min(Ie3.getBound(),uel.getBound(2)));
 FOR_3D(i1,i2,i3,J1,J2,J3)
 {
   x0 = XEP(i1,i2,i3,0);
   y0 = XEP(i1,i2,i3,1);
   #undef CC
   #define CC ex
   U(i1,i2,i3,CC) ## assgn e.gd(1,nxd,nyd,nzd,x0,y0,z0,CC,t) \
				 - e.y(x0,y0,z0,hz,t)/eps;
   #undef CC
   #define CC ey
   U(i1,i2,i3,CC) ## assgn e.gd(1,nxd,nyd,nzd,x0,y0,z0,CC,t) \
				 + e.x(x0,y0,z0,hz,t)/eps;
 }
}
else
{
 J1 = Range(max(Ih1.getBase(),uhl.getBase(0)),min(Ih1.getBound(),uhl.getBound(0)));
 J2 = Range(max(Ih2.getBase(),uhl.getBase(1)),min(Ih2.getBound(),uhl.getBound(1)));
 J3 = Range(max(Ih3.getBase(),uhl.getBase(2)),min(Ih3.getBound(),uhl.getBound(2)));
 FOR_3D(i1,i2,i3,J1,J2,J3)
 {
   x0 = XHP(i1,i2,i3,0);
   y0 = XHP(i1,i2,i3,1);

   #undef CC
   #define CC hz
   U(i1,i2,i3,CC) ## assgn e.gd(1,nxd,nyd,nzd,x0,y0,z0,CC,t) \
     + e.x( x0,y0,z0, ey, t)/mu - e.y( x0,y0,z0, ex, t)/mu;
 }
}
#endMacro

#beginMacro forcingLoops3DS( assgn )

 if ( (option==0 || option==1 ) )
   {
 J1 = Range(max(Ie1.getBase(),uel.getBase(0)),min(Ie1.getBound(),uel.getBound(0)));
 J2 = Range(max(Ie2.getBase(),uel.getBase(1)),min(Ie2.getBound(),uel.getBound(1)));
 J3 = Range(max(Ie3.getBase(),uel.getBase(2)),min(Ie3.getBound(),uel.getBound(2)));
 FOR_3D(i1,i2,i3,J1,J2,J3)
 {
   x0 = XEP(i1,i2,i3,0);
   y0 = XEP(i1,i2,i3,1);
   z0 = XEP(i1,i2,i3,2);
//    #undef CC
//    #define CC ex
//    e1
//    #undef CC
//    #define CC ey
//    e1
    #undef CC
    #define CC ex
   U(i1,i2,i3,CC) ## assgn e.gd(1,nxd,nyd,nzd,x0,y0,z0,CC,t) \
				 - (e.y(x0,y0,z0,hz,t)-e.z(x0,y0,z0,hy,t))/eps;
    #undef CC
    #define CC ey
   U(i1,i2,i3,CC) ## assgn e.gd(1,nxd,nyd,nzd,x0,y0,z0,CC,t) \
				 + (e.x(x0,y0,z0,hz,t)-e.z(x0,y0,z0,hx,t))/eps;

    #undef CC
    #define CC ez
   U(i1,i2,i3,CC) ## assgn e.gd(1,nxd,nyd,nzd,x0,y0,z0,CC,t) \
				 - (e.x(x0,y0,z0,hy,t)-e.y(x0,y0,z0,hx,t))/eps;
 }
   }
 else
   {

 J1 = Range(max(Ih1.getBase(),uhl.getBase(0)),min(Ih1.getBound(),uhl.getBound(0)));
 J2 = Range(max(Ih2.getBase(),uhl.getBase(1)),min(Ih2.getBound(),uhl.getBound(1)));
 J3 = Range(max(Ih3.getBase(),uhl.getBase(2)),min(Ih3.getBound(),uhl.getBound(2)));
 FOR_3D(i1,i2,i3,J1,J2,J3)
   {
   x0 = XHP(i1,i2,i3,0);
   y0 = XHP(i1,i2,i3,1);
   z0 = XHP(i1,i2,i3,2);

   #undef CC
   #define CC hx
   U(i1,i2,i3,CC) ## assgn e.gd(1,nxd,nyd,nzd,x0,y0,z0,CC,t) \
     + (e.y( x0,y0,z0, ez, t) - e.z( x0,y0,z0, ey, t))/mu;

   #undef CC
   #define CC hy
   U(i1,i2,i3,CC) ## assgn e.gd(1,nxd,nyd,nzd,x0,y0,z0,CC,t) \
     - (e.x( x0,y0,z0, ez, t) - e.z( x0,y0,z0, ex, t))/mu;

   #undef CC
   #define CC hz
   U(i1,i2,i3,CC) ## assgn e.gd(1,nxd,nyd,nzd,x0,y0,z0,CC,t) \
     + (e.x( x0,y0,z0, ey, t) - e.y( x0,y0,z0, ex, t))/mu;

   }

   }

#endMacro

int Maxwell::
getForcing(int current, int grid, realArray & u , real t, real dt, int option /* = 0 */ )
// ========================================================================================
//
//  Add the forcing:
//
// option==0 : add forcing to u
//     u+=   utt - c^2*Lap(u)
// option==1 : fill in u with the forcing
//     u =   utt - c^2*Lap(u) 
//
// kkc
// option==2 : u is h field and use += ( ==0 is efield )
// option==3 : u is h field and use == ( ==1 is efield )
// ========================================================================================
{
  // Just return if there is no forcing
  bool computeForcing = (forcingOption==twilightZoneForcing || 
			 forcingOption==gaussianSource ||
			 forcingOption==magneticSinusoidalPointSource ||
                         forcingOption==gaussianChargeSource||
                         forcingOption==userDefinedForcingOption );
  
  if( !computeForcing )
    return 0;
  
  // real time0=getCPU();

  if( forcingOption==userDefinedForcingOption )
  {
    // -- Compute user defined forcing ---

    int iparam[]={grid,current};  //
    real rparam[]={t,dt};  //
    if( option==1 )
      assign(u,0.); // user defined forcing only knows option==0
    userDefinedForcing( u,iparam,rparam );

    return 0;
  }


  assert( cgp!=NULL );
  CompositeGrid & cg = *cgp;
  const int numberOfComponentGrids = cg.numberOfComponentGrids();

  const int prev = (current-1+numberOfTimeLevels) % numberOfTimeLevels;
  const int next = (current+1) % numberOfTimeLevels;

  const int numberOfDimensions = cg.numberOfDimensions();

  // bpp macro
  EXTRACT_GFP(FORCING);

  Index J1,J2,J3;
  int extra=0;  // evaluate forcing on this many ghost points
  if( method==sosup ) 
    extra = orderOfAccuracyInSpace/2;  // sosup needs forcing on extra ghost lines


  if( forcingOption==twilightZoneForcing || forcingOption==gaussianSource ||
      forcingOption==gaussianChargeSource )
  {
    
    // we always need the center array for TZ forcing, otherwise not needed for rectangular grids:
    const realArray & x = (isRectangular && forcingOption!=twilightZoneForcing) ? u : mg.center();

    #ifdef USE_PPP
      const realSerialArray & uLocal  =  u.getLocalArrayWithGhostBoundaries();
      const realSerialArray & xLocal  =  x.getLocalArrayWithGhostBoundaries();
    #else
      const realSerialArray & uLocal  =  u;
      const realSerialArray & xLocal  =  x;
    #endif

    real *up = uLocal.Array_Descriptor.Array_View_Pointer3;
    const int uDim0=uLocal.getRawDataSize(0);
    const int uDim1=uLocal.getRawDataSize(1);
    const int uDim2=uLocal.getRawDataSize(2);
    #undef U
    #define U(i0,i1,i2,i3) up[i0+uDim0*(i1+uDim1*(i2+uDim2*(i3)))]

    //      real *xp = xLocal.Array_Descriptor.Array_View_Pointer3;
    //       const int xDim0=xLocal.getRawDataSize(0);
    //       const int xDim1=xLocal.getRawDataSize(1);
    //       const int xDim2=xLocal.getRawDataSize(2);
    //       #undef X
    //       #define X(i0,i1,i2,i3) xp[i0+xDim0*(i1+xDim1*(i2+xDim2*(i3)))]

    Index I1,I2,I3;

    getIndex(mg.gridIndexRange(),I1,I2,I3,extra);
    // For working with local arrays (parallel):
    Index J1,J2,J3;

    // const realArray & x = mg.center();
    // Range all;
    // const bool isRectangular = mg.isRectangular();

    if( forcingOption==twilightZoneForcing )
    {
      assert( tz!=NULL );
      OGFunction & e = *tz;

      const real csq=c*c;
      const real dtsqby12=dt*dt/12.;

      Range C(ex,hz);
      const int ntd=2, nxd=0, nyd=0, nzd=0; // we need the 2nd time derivative


      bool useScalarLoops=false;
      #ifdef USE_PPP
	  useScalarLoops=true;
      #endif 
      if( useScalarLoops || method==dsiMatVec || method==dsi )
      {
	// ********************** this is slow -- fix *****************

	int i1,i2,i3;
	real x0,y0,z0=0.;
	  
	if( option==0 || option==2 )
	{
	  if( mg.numberOfDimensions()==2 )
	  {
// 	      forcingLoops2D(U(i1,i2,i3,CC) += e.gd(ntd,nxd,nyd,nzd,x0,y0,z0,CC,t) \
//                                                - csq*(e.xx(x0,y0,z0,CC,t)+e.yy(x0,y0,z0,CC,t)););
	    if( method==nfdtd || method==sosup )
	    {
	      forcingLoops2D((i1,i2,i3,CC) += e.gd(ntd,nxd,nyd,nzd,x0,y0,z0,CC,t) \
			     - csq*(e.xx(x0,y0,z0,CC,t)+e.yy(x0,y0,z0,CC,t)););
	    }
	    else
	    {
	      forcingLoops2DS( += );
	    }
	  }
	  else
	  {
	    //	      forcingLoops3D(U(i1,i2,i3,CC) += e.gd(ntd,nxd,nyd,nzd,x0,y0,z0,CC,t) \
	    //			     - csq*(e.xx(x0,y0,z0,CC,t)+e.yy(x0,y0,z0,CC,t)+e.zz(x0,y0,z0,CC,t)););
	    if ( method==nfdtd || method==sosup )
	    {
	      forcingLoops3D((i1,i2,i3,CC) += e.gd(ntd,nxd,nyd,nzd,x0,y0,z0,CC,t) \
			     - csq*(e.xx(x0,y0,z0,CC,t)+e.yy(x0,y0,z0,CC,t)+e.zz(x0,y0,z0,CC,t)););
	    }
	    else
	    {
	      forcingLoops3DS( += );
	    }
	  }
	}
	else
	{
	  if( mg.numberOfDimensions()==2 )
	  {
// 	      forcingLoops2D(U(i1,i2,i3,CC) = e.gd(ntd,nxd,nyd,nzd,x0,y0,z0,CC,t) \
//                                                - csq*(e.xx(x0,y0,z0,CC,t)+e.yy(x0,y0,z0,CC,t)););
	    if ( method==nfdtd || method==sosup )
	    {
	      forcingLoops2D((i1,i2,i3,CC) = e.gd(ntd,nxd,nyd,nzd,x0,y0,z0,CC,t) \
			     - csq*(e.xx(x0,y0,z0,CC,t)+e.yy(x0,y0,z0,CC,t)););
	    }
	    else
	    {
	      forcingLoops2DS( = );
	    }
	  }
	  else
	  {
// 	      forcingLoops3D(U(i1,i2,i3,CC) = e.gd(ntd,nxd,nyd,nzd,x0,y0,z0,CC,t) \
	    //			     - csq*(e.xx(x0,y0,z0,CC,t)+e.yy(x0,y0,z0,CC,t)+e.zz(x0,y0,z0,CC,t)););
	    if ( method==nfdtd || method==sosup )
	    {
	      forcingLoops3D((i1,i2,i3,CC) = e.gd(ntd,nxd,nyd,nzd,x0,y0,z0,CC,t) \
			     - csq*(e.xx(x0,y0,z0,CC,t)+e.yy(x0,y0,z0,CC,t)+e.zz(x0,y0,z0,CC,t)););
	    }
	    else
	    {
	      forcingLoops3DS( = );
	    }
	  }
	}
	if( orderOfAccuracyInSpace>=4 && method!=sosup )
	{// add forcing for methods that are 4th order or higher
	  if( mg.numberOfDimensions()==2 )
	  {
// 	      forcingLoops2D(U(i1,i2,i3,CC)+= (e.gd(4,0,0,0,x0,y0,z0,CC,t) \
// 						 - (csq*csq)*(e.gd(0,4,0,0,x0,y0,z0,CC,t)\
// 							      +e.gd(0,0,4,0,x0,y0,z0,CC,t)\
// 							      +2.*e.gd(0,2,2,0,x0,y0,z0,CC,t) ) )*dtsqby12;);
	    forcingLoops2D((i1,i2,i3,CC)+= (e.gd(4,0,0,0,x0,y0,z0,CC,t) \
					    - (csq*csq)*(e.gd(0,4,0,0,x0,y0,z0,CC,t)\
							 +e.gd(0,0,4,0,x0,y0,z0,CC,t)\
							 +2.*e.gd(0,2,2,0,x0,y0,z0,CC,t) ) )*dtsqby12;);
	  }
	  else
	  {
// 	      forcingLoops3D(U(i1,i2,i3,CC)+=    (e.gd(4,0,0,0,x0,y0,z0,CC,t) \
// 						    - (csq*csq)*(e.gd(0,4,0,0,x0,y0,z0,CC,t)\
// 								 +e.gd(0,0,4,0,x0,y0,z0,CC,t)\
// 								 +e.gd(0,0,0,4,x0,y0,z0,CC,t)\
// 								 +2.*(e.gd(0,2,2,0,x0,y0,z0,CC,t)\
// 								      +e.gd(0,2,0,2,x0,y0,z0,CC,t)\
// 								      +e.gd(0,0,2,2,x0,y0,z0,CC,t)) ) )*dtsqby12;);
	    forcingLoops3D((i1,i2,i3,CC)+=    (e.gd(4,0,0,0,x0,y0,z0,CC,t) \
					       - (csq*csq)*(e.gd(0,4,0,0,x0,y0,z0,CC,t)\
							    +e.gd(0,0,4,0,x0,y0,z0,CC,t)\
							    +e.gd(0,0,0,4,x0,y0,z0,CC,t)\
							    +2.*(e.gd(0,2,2,0,x0,y0,z0,CC,t)\
								 +e.gd(0,2,0,2,x0,y0,z0,CC,t)\
								 +e.gd(0,0,2,2,x0,y0,z0,CC,t)) ) )*dtsqby12;);
	  }
	}
	
	if( orderOfAccuracyInSpace>=6 && method!=sosup )
	{ // add forcing for methods that are 6th order or higher
	  real dt4by360=dt*dt*dt*dt/360.;
	  
	  if( mg.numberOfDimensions()==2 )
	  {
// 	      forcingLoops2D(U(i1,i2,i3,CC)+= (e.gd(6,0,0,0,x0,y0,z0,CC,t) \
// 						 - (csq*csq*csq)*(e.gd(0,6,0,0,x0,y0,z0,CC,t)\
// 								  +e.gd(0,0,6,0,x0,y0,z0,CC,t)\
// 								  +3.*e.gd(0,2,4,0,x0,y0,z0,CC,t) \
// 								  +3.*e.gd(0,4,2,0,x0,y0,z0,CC,t) ) )*dt4by360;);

	    forcingLoops2D((i1,i2,i3,CC)+= (e.gd(6,0,0,0,x0,y0,z0,CC,t) \
					    - (csq*csq*csq)*(e.gd(0,6,0,0,x0,y0,z0,CC,t)\
							     +e.gd(0,0,6,0,x0,y0,z0,CC,t)\
							     +3.*e.gd(0,2,4,0,x0,y0,z0,CC,t) \
							     +3.*e.gd(0,4,2,0,x0,y0,z0,CC,t) ) )*dt4by360;);
	  }
	  else
	  {
// 	      forcingLoops3D(U(i1,i2,i3,CC)+=    (e.gd(6,0,0,0,x0,y0,z0,CC,t) \
// 						    - (csq*csq*csq)*(e.gd(0,6,0,0,x0,y0,z0,CC,t)\
// 								     +e.gd(0,0,6,0,x0,y0,z0,CC,t)\
// 								     +e.gd(0,0,0,6,x0,y0,z0,CC,t)\
// 								     +3.*( e.gd(0,4,2,0,x0,y0,z0,CC,t)\
// 									   +e.gd(0,2,4,0,x0,y0,z0,CC,t)\
// 									   +e.gd(0,4,0,2,x0,y0,z0,CC,t)\
// 									   +e.gd(0,2,0,4,x0,y0,z0,CC,t)\
// 									   +e.gd(0,0,4,2,x0,y0,z0,CC,t)\
// 									   +e.gd(0,0,2,4,x0,y0,z0,CC,t) )\
// 								     +6.*e.gd(0,2,2,2,x0,y0,z0,CC,t)\
// 						      ) )*dt4by360;);
	    forcingLoops3D((i1,i2,i3,CC)+=    (e.gd(6,0,0,0,x0,y0,z0,CC,t) \
					       - (csq*csq*csq)*(e.gd(0,6,0,0,x0,y0,z0,CC,t)\
								+e.gd(0,0,6,0,x0,y0,z0,CC,t)\
								+e.gd(0,0,0,6,x0,y0,z0,CC,t)\
								+3.*( e.gd(0,4,2,0,x0,y0,z0,CC,t)\
								      +e.gd(0,2,4,0,x0,y0,z0,CC,t)\
								      +e.gd(0,4,0,2,x0,y0,z0,CC,t)\
								      +e.gd(0,2,0,4,x0,y0,z0,CC,t)\
								      +e.gd(0,0,4,2,x0,y0,z0,CC,t)\
								      +e.gd(0,0,2,4,x0,y0,z0,CC,t) )\
								+6.*e.gd(0,2,2,2,x0,y0,z0,CC,t)\
						 ) )*dt4by360;);
	  }
	}

	
      }
      else // ** Old way **
      {
	Index Ch = cg.numberOfDimensions()==2 ? Range(hz,hz) : Range(hx,hz);
	Index Ce = cg.numberOfDimensions()==2 ? Range(ex,ey) : Range(ex,ez);
	
	if( option==0 || option==2 )
	{
          if( solveForElectricField ) 
	    u(I1,I2,I3,Ce)+= e.gd(ntd,nxd,nyd,nzd,mg,I1,I2,I3,Ce,tE) - csq*e.laplacian(mg,I1,I2,I3,Ce,tE);
          if( solveForMagneticField )
  	    u(I1,I2,I3,Ch)+= e.gd(ntd,nxd,nyd,nzd,mg,I1,I2,I3,Ch,tH) - csq*e.laplacian(mg,I1,I2,I3,Ch,tH);
	}
	else
	{
	  u(I1,I2,I3,C) = e.gd(ntd,nxd,nyd,nzd,mg,I1,I2,I3,C,t) - csq*e.laplacian(mg,I1,I2,I3,C,t);
// 	      u(I1,I2,I3,Ce) = e.gd(ntd,nxd,nyd,nzd,mg,Ie1,Ie2,Ie3,Ce,tE) - csq*e.laplacian(mg,Ie1,Ie2,Ie3,Ce,tE);
// 	      u(I1,I2,I3,Ch) = e.gd(ntd,nxd,nyd,nzd,mg,Ih1,Ih2,Ih3,Ch,tH) - csq*e.laplacian(mg,Ih1,Ih2,Ih3,Ch,tH);
	}

	// printF(" option=%i csq=%e \n",option,csq);
	  
	// display(e.gd(ntd,nxd,nyd,nzd,mg,I1,I2,I3,C,t)," e.tt","%5.2f ");
	// display(e.laplacian(mg,I1,I2,I3,C,t),"e.laplacian(mg,I1,I2,I3,C,t)","%5.2f ");

	// display(u(I1,I2,I3,C),"getForcing: RHS after first assignment","%5.2f ");

	if( timeSteppingMethod == modifiedEquationTimeStepping && method!=sosup )
	{
	  if( orderOfAccuracyInSpace>=4 )
	  {
	    if( mg.numberOfDimensions()==2 )
	    {
	      u(I1,I2,I3,C)+= (e.gd(4,0,0,0,mg,I1,I2,I3,C,t) 
			       - (csq*csq)*(e.gd(0,4,0,0,mg,I1,I2,I3,C,t)
					    +e.gd(0,0,4,0,mg,I1,I2,I3,C,t)
					    +2.*e.gd(0,2,2,0,mg,I1,I2,I3,C,t) ) )*dtsqby12;

	      // display(u(I1,I2,I3,C),"getForcing: RHS after first assignment","%5.2f ");

	    }
	    else
	    {
              Range C(ex,ez);
	      u(I1,I2,I3,C)+=(e.gd(4,0,0,0,mg,I1,I2,I3,C,t) 
			      - (csq*csq)*(e.gd(0,4,0,0,mg,I1,I2,I3,C,t)
					   +e.gd(0,0,4,0,mg,I1,I2,I3,C,t)
					   +e.gd(0,0,0,4,mg,I1,I2,I3,C,t)
					   +2.*(e.gd(0,2,2,0,mg,I1,I2,I3,C,t)
						+e.gd(0,2,0,2,mg,I1,I2,I3,C,t)
						+e.gd(0,0,2,2,mg,I1,I2,I3,C,t)) ) )*dtsqby12;
	    }
	  }
	
	  if( orderOfAccuracyInSpace>=6 )
	  {
	    real dt4by360=dt*dt*dt*dt/360.;
	  
	    if( mg.numberOfDimensions()==2 )
	    {
	      if( false )
	      {
		display(e.gd(6,0,0,0,mg,I1,I2,I3,hz,t)," exact tttttt",debugFile,"%9.2e ");
		display(e.gd(0,6,0,0,mg,I1,I2,I3,hz,t)," exact xxxxxx",debugFile,"%9.2e ");
		display(e.gd(0,2,4,0,mg,I1,I2,I3,hz,t)," exact xxyyyy",debugFile,"%9.2e ");
		display(e.gd(0,4,2,0,mg,I1,I2,I3,hz,t)," exact xxxxyy",debugFile,"%9.2e ");
		display(e.gd(0,0,6,0,mg,I1,I2,I3,hz,t)," exact yyyyyy",debugFile,"%9.2e ");
	      }
		

	      u(I1,I2,I3,C)+= (e.gd(6,0,0,0,mg,I1,I2,I3,C,t) 
			       - (csq*csq*csq)*(e.gd(0,6,0,0,mg,I1,I2,I3,C,t)
						+e.gd(0,0,6,0,mg,I1,I2,I3,C,t)
						+3.*e.gd(0,2,4,0,mg,I1,I2,I3,C,t) 
						+3.*e.gd(0,4,2,0,mg,I1,I2,I3,C,t) ) )*dt4by360;
	    }
	    else
	    {
	      u(I1,I2,I3,C)+=    (e.gd(6,0,0,0,mg,I1,I2,I3,C,t) 
				  - (csq*csq*csq)*(e.gd(0,6,0,0,mg,I1,I2,I3,C,t)
						   +e.gd(0,0,6,0,mg,I1,I2,I3,C,t)
						   +e.gd(0,0,0,6,mg,I1,I2,I3,C,t)
						   +3.*( e.gd(0,4,2,0,mg,I1,I2,I3,C,t)
							 +e.gd(0,2,4,0,mg,I1,I2,I3,C,t)
							 +e.gd(0,4,0,2,mg,I1,I2,I3,C,t)
							 +e.gd(0,2,0,4,mg,I1,I2,I3,C,t)
							 +e.gd(0,0,4,2,mg,I1,I2,I3,C,t)
							 +e.gd(0,0,2,4,mg,I1,I2,I3,C,t) )
						   +6.*e.gd(0,2,2,2,mg,I1,I2,I3,C,t)
				    ) )*dt4by360;
	    }
	  }
	
	

	}
      }
    }
    else if( forcingOption==gaussianSource )
    {
      //  f3(x,t) = sin(2*pi*omega*t)*exp( -beta*( |x-x0|^2 ) )
      const real beta =gaussianSourceParameters[0];
      const real omega=gaussianSourceParameters[1];
      const real x0   =gaussianSourceParameters[2];
      const real y0   =gaussianSourceParameters[3];
      const real z0   =gaussianSourceParameters[4];

      const realArray & x = mg.center();

      const real t0=0.; // .25;
      const real ctE=cos(2.*Pi*omega*(tE-t0));
      const real stE=sin(2.*Pi*omega*(tE-t0));
      const real ctH=cos(2.*Pi*omega*(tH-t0));
      const real stH=sin(2.*Pi*omega*(tH-t0));

      const bool isRectangular = mg.isRectangular();

      if( debug & 4 )
	printF(" addForcing:gaussianSource: beta=%8.2e omega=%8.2e x0=(%8.2e,%8.2e,%8.2e) \n",
	       beta,omega,x0,y0,z0);

      if( !isRectangular )
      {
      
	realSerialArray f3E(Ie1,Ie2,Ie3),f3H(Ih1,Ih2,Ih3);

	if( mg.numberOfDimensions()==2 )
	{
	  f3H=exp( -beta*( SQR(xh(Ih1,Ih2,Ih3)-x0)+SQR(yh(Ih1,Ih2,Ih3)-y0) ) );
	  f3E=exp( -beta*( SQR(xe(Ie1,Ie2,Ie3)-x0)+SQR(ye(Ie1,Ie2,Ie3)-y0) ) );

	  if( option==0 )
	  {
	    uLocal(Ih1,Ih2,Ih3,hz)+=( 2.*Pi*omega*ctH)*f3H;
	    uLocal(Ie1,Ie2,Ie3,ex)+=(-2.*beta*stE)*(ye(Ie1,Ie2,Ie3)-y0)*f3E;
	    uLocal(Ie1,Ie2,Ie3,ey)+=( 2.*beta*stE)*(xe(Ie1,Ie2,Ie3)-x0)*f3E;
	  }
	  else
	  {
	    uLocal(Ih1,Ih2,Ih3,hz)=( 2.*Pi*omega*ctH)*f3H;
	    uLocal(Ie1,Ie2,Ie3,ex)=(-2.*beta*stE)*(ye(Ie1,Ie2,Ie3)-y0)*f3E;
	    uLocal(Ie1,Ie2,Ie3,ey)=( 2.*beta*stE)*(xe(Ie1,Ie2,Ie3)-x0)*f3E;
	  }
// 	    if( option==0 )
// 	    {
// 	      u(I1,I2,I3,hz)+=( 2.*Pi*omega*ct)*f3;
// 	      u(I1,I2,I3,ex)+=(-2.*beta*st)*(x(I1,I2,I3,1)-y0)*f3;
// 	      u(I1,I2,I3,ey)+=( 2.*beta*st)*(x(I1,I2,I3,0)-x0)*f3;
// 	    }
// 	    else
// 	    {
// 	      u(I1,I2,I3,hz)=( 2.*Pi*omega*ct)*f3;
// 	      u(I1,I2,I3,ex)=(-2.*beta*st)*(x(I1,I2,I3,1)-y0)*f3;
// 	      u(I1,I2,I3,ey)=( 2.*beta*st)*(x(I1,I2,I3,0)-x0)*f3;
// 	    }
	}
	else // *** 3D ***
	{
	  // scale by beta*beta to make O(1)
	  f3E(I1,I2,I3)=(beta*beta*ctE)*exp( -beta*( SQR(xe(I1,I2,I3)-x0)+SQR(ye(I1,I2,I3)-y0)+SQR(ze(I1,I2,I3)-z0) ) );
	  if( option==0 )
	  {
	    uLocal(I1,I2,I3,ex)+=( (ze(I1,I2,I3)-z0)-(ye(I1,I2,I3)-y0) )*f3E(I1,I2,I3);
	    uLocal(I1,I2,I3,ey)+=( (xe(I1,I2,I3)-x0)-(ze(I1,I2,I3)-z0) )*f3E(I1,I2,I3);
	    uLocal(I1,I2,I3,ez)+=( (ye(I1,I2,I3)-y0)-(xe(I1,I2,I3)-x0) )*f3E(I1,I2,I3);
	  }
	  else
	  {
	    uLocal(I1,I2,I3,ex)=( (ze(I1,I2,I3)-z0)-(ye(I1,I2,I3)-y0) )*f3E(I1,I2,I3);
	    uLocal(I1,I2,I3,ey)=( (xe(I1,I2,I3)-x0)-(ze(I1,I2,I3)-z0) )*f3E(I1,I2,I3);
	    uLocal(I1,I2,I3,ez)=( (ye(I1,I2,I3)-y0)-(xe(I1,I2,I3)-x0) )*f3E(I1,I2,I3);
	  }
	}
	  
      }
      else
      {
	real dx[3],xab[2][3];
	mg.getRectangularGridParameters( dx, xab );

	const int i0a=mg.gridIndexRange(0,0);
	const int i1a=mg.gridIndexRange(0,1);
	const int i2a=mg.gridIndexRange(0,2);

	const real xa=xab[0][0], dx0=dx[0];
	const real ya=xab[0][1], dy0=dx[1];
	const real za=xab[0][2], dz0=dx[2];
	
#define X0(i0,i1,i2) (xa+dx0*(i0-i0a))
#define X1(i0,i1,i2) (ya+dy0*(i1-i1a))
#define X2(i0,i1,i2) (za+dz0*(i2-i2a))

	int i1,i2,i3;
	real xd,yd,zd,f3;
	Index J1,J2,J3;
	if( mg.numberOfDimensions()==2 )
	{
	  if( option==0 )
	  {
	    //XXX not fully implemented for staggered schemes yet!
	    J1 = Range(max(Ie1.getBase(),uel.getBase(0)),min(Ie1.getBound(),uel.getBound(0)));
	    J2 = Range(max(Ie2.getBase(),uel.getBase(1)),min(Ie2.getBound(),uel.getBound(1)));
	    J3 = Range(max(Ie3.getBase(),uel.getBase(2)),min(Ie3.getBound(),uel.getBound(2)));
	    FOR_3D(i1,i2,i3,J1,J2,J3)
	    {
	      xd=X0(i1,i2,i3)-x0;
	      yd=X1(i1,i2,i3)-y0;
	    
	      f3=exp( -beta*( xd*xd+yd*yd ) );
	      U(i1,i2,i3,hz)+=( 2.*Pi*omega*ctH)*f3;
	      U(i1,i2,i3,ex)+=(-2.*beta*stE)*yd*f3;
	      U(i1,i2,i3,ey)+=( 2.*beta*stE)*xd*f3;
	    }
	  }
	  else
	  {
	    J1 = Range(max(Ie1.getBase(),uel.getBase(0)),min(Ie1.getBound(),uel.getBound(0)));
	    J2 = Range(max(Ie2.getBase(),uel.getBase(1)),min(Ie2.getBound(),uel.getBound(1)));
	    J3 = Range(max(Ie3.getBase(),uel.getBase(2)),min(Ie3.getBound(),uel.getBound(2)));
	    FOR_3D(i1,i2,i3,J1,J2,J3)
	    {
	      xd=X0(i1,i2,i3)-x0;
	      yd=X1(i1,i2,i3)-y0;
	    
	      f3=exp( -beta*( xd*xd+yd*yd ) );
	      U(i1,i2,i3,hz)=( 2.*Pi*omega*ctH)*f3;
	      U(i1,i2,i3,ex)=(-2.*beta*stE)*yd*f3;
	      U(i1,i2,i3,ey)=( 2.*beta*stE)*xd*f3;
	    }
	  
	  }
	}
	else // 3D
	{
	  // scale by beta*beta to make O(1)
	  J1 = Range(max(Ie1.getBase(),uel.getBase(0)),min(Ie1.getBound(),uel.getBound(0)));
	  J2 = Range(max(Ie2.getBase(),uel.getBase(1)),min(Ie2.getBound(),uel.getBound(1)));
	  J3 = Range(max(Ie3.getBase(),uel.getBase(2)),min(Ie3.getBound(),uel.getBound(2)));
	  real betaSqct=beta*beta*ctE;
	  if( option==0 )
	  {
	    FOR_3D(i1,i2,i3,J1,J2,J3)
	    {
	      xd=X0(i1,i2,i3)-x0;
	      yd=X1(i1,i2,i3)-y0;
	      zd=X2(i1,i2,i3)-z0;
	    
	      f3=betaSqct*exp( -beta*( xd*xd+yd*yd+zd*zd ) );
	      U(i1,i2,i3,ex)+=( zd-yd )*f3;
	      U(i1,i2,i3,ey)+=( xd-zd )*f3;
	      U(i1,i2,i3,ez)+=( yd-xd )*f3;
	    }
	  }
	  else
	  {
	    FOR_3D(i1,i2,i3,J1,J2,J3)
	    {
	      xd=X0(i1,i2,i3)-x0;
	      yd=X1(i1,i2,i3)-y0;
	      zd=X2(i1,i2,i3)-z0;
	    
	      f3=betaSqct*exp( -beta*( xd*xd+yd*yd+zd*zd ) );
	      U(i1,i2,i3,ex)=( zd-yd )*f3;
	      U(i1,i2,i3,ey)=( xd-zd )*f3;
	      U(i1,i2,i3,ez)=( yd-xd )*f3;
	    }
	  }
	}

      }
      
    }
    else if( forcingOption==gaussianChargeSource )
    {

      const realArray & f = u;  // do this for now

      const intArray & mask = mg.mask();
      
      realArray & x = isRectangular ? u : mg.center();
      realArray & rx = isRectangular ? u : mg.inverseVertexDerivative();

     #ifdef USE_PPP
      const realSerialArray & uLocal  =  u.getLocalArrayWithGhostBoundaries();
      const realSerialArray & fLocal  =  f.getLocalArrayWithGhostBoundaries();
      const realSerialArray & rxLocal = rx.getLocalArrayWithGhostBoundaries();
      const intSerialArray & maskLocal  =  mask.getLocalArrayWithGhostBoundaries();
     #else
      const realSerialArray & uLocal  =  u;
      const realSerialArray & fLocal  =  f;
      const realSerialArray & rxLocal = rx; 
      const intSerialArray & maskLocal  =  mask; 
     #endif

      real *uptr = uLocal.getDataPointer();
      real *fptr = fLocal.getDataPointer();
      real *xptr = xLocal.getDataPointer();
      real *rxptr = rxLocal.getDataPointer();
      int *maskptr = maskLocal.getDataPointer();

//       real dx[3],xab[2][3];
//       if( isRectangular )
//         mg.getRectangularGridParameters( dx, xab );


      if( option==1 )
      {
        realSerialArray & fnc = (realSerialArray&)fLocal; // cast away const
	fnc=0.;  // the forcing function always adds a contribution to f
      }
      

      int ngcs=0;
      real amplitude=gaussianChargeSourceParameters[ngcs][0];
      real beta     =gaussianChargeSourceParameters[ngcs][1];
      real p        =gaussianChargeSourceParameters[ngcs][2];
      real xp0      =gaussianChargeSourceParameters[ngcs][3];
      real xp1      =gaussianChargeSourceParameters[ngcs][4];
      real xp2      =gaussianChargeSourceParameters[ngcs][5];
      real vp0      =gaussianChargeSourceParameters[ngcs][6];
      real vp1      =gaussianChargeSourceParameters[ngcs][7];
      real vp2      =gaussianChargeSourceParameters[ngcs][8];


      J1 = Range(max(Ie1.getBase(),uel.getBase(0)),min(Ie1.getBound(),uel.getBound(0)));
      J2 = Range(max(Ie2.getBase(),uel.getBase(1)),min(Ie2.getBound(),uel.getBound(1)));
      J3 = Range(max(Ie3.getBase(),uel.getBase(2)),min(Ie3.getBound(),uel.getBound(2)));

      int gridType = isRectangular? 0 : 1;
      int useForcing=1;
      int useWhereMask=1;
      int orderOfExtrapolation=orderOfAccuracyInSpace+1;
      
      real ep=0;   // pointer to TZ function -- not used yet
      
      int ipar[30];
      real rpar[30];
      
      ipar[0] =J1.getBase(); 
      ipar[1] =J1.getBound(); 
      ipar[2] =J2.getBase(); 
      ipar[3] =J2.getBound();
      ipar[4] =J3.getBase();
      ipar[5] =J3.getBound();
      
      ipar[6] =gridType;
      ipar[7] =orderOfAccuracyInSpace;
      ipar[8] =orderOfAccuracyInTime;
      ipar[9] =orderOfExtrapolation;
      ipar[10]=useForcing;
      ipar[11]=ex;
      ipar[12]=ey;
      ipar[13]=ez;
      ipar[14]=hx;
      ipar[15]=hy;
      ipar[16]=hz;
      ipar[17]=useWhereMask;
      ipar[18]=grid;
      ipar[19]=debug;
      ipar[20]=forcingOption;

      rpar[0] =dx[0];
      rpar[1] =dx[1];
      rpar[2] =dx[2];
      rpar[3] =mg.gridSpacing(0);
      rpar[4] =mg.gridSpacing(1);
      rpar[5] =mg.gridSpacing(2);
      rpar[6] =t;
      rpar[7] =ep;
      rpar[8] =dt;
      rpar[9] =c;
      rpar[10]=eps;
      rpar[11]=mu;
      rpar[12]=kx;
      rpar[13]=ky;
      rpar[14]=kz;
      rpar[15]=slowStartInterval;
      rpar[16]=xab[0][0];
      rpar[17]=xab[0][1];
      rpar[18]=xab[0][2];
      rpar[19]=amplitude;
      rpar[20]=beta;
      rpar[21]=p;   
      rpar[22]=xp0;
      rpar[23]=xp1;
      rpar[24]=xp2;
      rpar[25]=vp0;
      rpar[26]=vp1;
      rpar[27]=vp2;


      int ierr=0;
 
      forcingOptMaxwell( mg.numberOfDimensions(),
                         uLocal.getBase(0),uLocal.getBound(0),uLocal.getBase(1),uLocal.getBound(1),
			 uLocal.getBase(2),uLocal.getBound(2),
                         fLocal.getBase(0),fLocal.getBound(0),fLocal.getBase(1),fLocal.getBound(1),
			 fLocal.getBase(2),fLocal.getBound(2),
			 *uptr,*fptr,*maskptr,*rxptr, *xptr,
                         ipar[0], rpar[0], ierr );
      

      if( debug & 8 ) display(f,"f after forcingOptMaxwell",debugFile,"%9.2e ");
      
    }


#undef X0
#undef X1
#undef X2
 
  }

//kkc removed because this should be in the calling scope  timing(timeForForcing)+=getCPU()-time0;
  
 EXTRACT_GFP_END(FORCING);

  return 0;
}

