#
# **** Points outside vertices ****
#
# Derive 4th-order PEC boundary conditions for Maxwell's equations.
#   (see the file ogmg/neumann.maple)
#
# restart; read "bc4v.maple";
clear;

with(StringTools):

Dzr := proc(f)
  local x,y,z;
  option operator;
  unapply( simplify( (f(x+1,y,z)-f(x-1,y,z))/2 ), x,y,z);
end:
Dpr := proc(f)
  local x,y,z;
  option operator;
  unapply( simplify( f(x+1,y,z)-f(x,y,z) ), x,y,z );
end:
Dmr := proc(f)
  local x,y,z;
  option operator;
  unapply( simplify( f(x,y,z)-f(x-1,y,z)), x,y,z);
end:
Dzs := proc(f)
  local x,y,z;
  option operator;
  unapply( simplify( (f(x,y+1,z)-f(x,y-1,z))/2 ), x,y,z);
end:
Dps := proc(f)
  local x,y,z;
  option operator;
  unapply( simplify( f(x,y+1,z)-f(x,y,z) ), x,y,z);
end:
Dms := proc(f)
  local x,y,z;
  option operator;
  unapply( simplify( f(x,y,z)-f(x,y-1,z)), x,y,z);
end:

Dzt := proc(f)
  local x,y,z;
  option operator;
  unapply( simplify( (f(x,y,z+1)-f(x,y,z-1))/2 ), x,y,z);
end:
Dpt := proc(f)
  local x,y,z;
  option operator;
  unapply( simplify( f(x,y,z+1)-f(x,y,z) ), x,y,z);
end:
Dmt := proc(f)
  local x,y,z;
  option operator;
  unapply( simplify( f(x,y,z)-f(x,y,z-1)), x,y,z);
end:

# --------------------------------------------------------
substituteValues :=proc( uu )
 local bc;

  bc:=uu;

  bc:=subs(a11(i1-1,i2,i3)=a11m1,a12(i1-1,i2,i3)=a12m1,a11(i1+1,i2,i3)=a11p1,a12(i1+1,i2,i3)=a12p1,bc):
  bc:=subs(a11(i1-2,i2,i3)=a11m2,a12(i1-2,i2,i3)=a12m2,a11(i1+2,i2,i3)=a11p2,a12(i1+2,i2,i3)=a12p2,bc):

  bc:=subs(a21(i1-1,i2,i3)=a21m1,a22(i1-1,i2,i3)=a22m1,a21(i1+1,i2,i3)=a21p1,a22(i1+1,i2,i3)=a22p1,bc):
  bc:=subs(a21(i1-2,i2,i3)=a21m2,a22(i1-2,i2,i3)=a22m2,a21(i1+2,i2,i3)=a21p2,a22(i1+2,i2,i3)=a22p2,bc):

  bc:=subs(a11(i1,i2-1,i3)=a11zm1,a12(i1,i2-1,i3)=a12zm1,a11(i1,i2+1,i3)=a11zp1,a12(i1,i2+1,i3)=a12zp1,bc):
  bc:=subs(a21(i1,i2-1,i3)=a21zm1,a22(i1,i2-1,i3)=a22zm1,a21(i1,i2+1,i3)=a21zp1,a22(i1,i2+1,i3)=a22zp1,bc):

  bc:=subs(a11(i1,i2-2,i3)=a11zm2,a12(i1,i2-2,i3)=a12zm2,a11(i1,i2+2,i3)=a11zp2,a12(i1,i2+2,i3)=a12zp2,bc):
  bc:=subs(a21(i1,i2-2,i3)=a21zm2,a22(i1,i2-2,i3)=a22zm2,a21(i1,i2+2,i3)=a21zp2,a22(i1,i2+2,i3)=a22zp2,bc):

  bc := subs(u(i1,i2,i3)=u(i1,i2,i3,ex),bc):
  bc := subs(v(i1,i2,i3)=u(i1,i2,i3,ey),bc):

  bc := subs(u(i1+1,i2,i3)=u(i1+is1,i2,i3,ex),bc):
  bc := subs(v(i1+1,i2,i3)=u(i1+is1,i2,i3,ey),bc):
				      
  bc := subs(u(i1-1,i2,i3)=u(i1-is1,i2,i3,ex),bc):
  bc := subs(v(i1-1,i2,i3)=u(i1-is1,i2,i3,ey),bc):


  bc := subs(u(i1,i2+1,i3)=u(i1,i2+is2,i3,ex),bc):
  bc := subs(v(i1,i2+1,i3)=u(i1,i2+is2,i3,ey),bc):
		      	       
  bc := subs(u(i1,i2-1,i3)=u(i1,i2-is2,i3,ex),bc):
  bc := subs(v(i1,i2-1,i3)=u(i1,i2-is2,i3,ey),bc):


  bc := subs(u(i1+2,i2,i3)=u(i1+2*is1,i2,i3,ex),bc):
  bc := subs(v(i1+2,i2,i3)=u(i1+2*is1,i2,i3,ey),bc):

  bc := subs(u(i1-2,i2,i3)=u(i1-2*is1,i2,i3,ex),bc):
  bc := subs(v(i1-2,i2,i3)=u(i1-2*is1,i2,i3,ey),bc):

  bc := subs(u(i1,i2+2,i3)=u(i1,i2+2*is2,i3,ex),bc):
  bc := subs(v(i1,i2+2,i3)=u(i1,i2+2*is2,i3,ey),bc):
		      	       	        
  bc := subs(u(i1,i2-2,i3)=u(i1,i2-2*is2,i3,ex),bc):
  bc := subs(v(i1,i2-2,i3)=u(i1,i2-2*is2,i3,ey),bc):

  bcs:=convert(bc,string):
  bcs:= SubstituteAll(bcs,"^2","**2"):
  bcs:= SubstituteAll(bcs,"^3","**3"):
  bcs:= SubstituteAll(bcs,"^4","**4"):
  bcs:= SubstituteAll(bcs,"/2*","/2.*"):
  bcs:= SubstituteAll(bcs,"/3*","/3.*"):
  bcs:= SubstituteAll(bcs,"/4*","/4.*"):
  bcs:= SubstituteAll(bcs,"/5*","/5.*"):
  bcs:= SubstituteAll(bcs,"/6*","/6.*"):

  RETURN(bcs):

end:
# ----
substitutePartials :=proc( uu )
 local vv;
 vv := subs(D[1,1,2](a11)=a11rrs,D[1,2](a11)=a11rs,D[1,1](a11)=a11rr,D[1](a11)=a11r,D[2](a11)=a11s,uu):
 vv := subs(D[1,1,2](a12)=a12rrs,D[1,2](a12)=a12rs,D[1,1](a12)=a12rr,D[1](a12)=a12r,D[2](a12)=a12s,vv):
 vv := subs(D[1,1,2](a21)=a21rrs,D[1,2](a21)=a21rs,D[1,1](a21)=a21rr,D[1](a21)=a21r,D[2](a21)=a21s,vv):
 vv := subs(D[1,1,2](a22)=a22rrs,D[1,2](a22)=a22rs,D[1,1](a22)=a22rr,D[1](a22)=a22r,D[2](a22)=a22s,vv):
 vv := subs(D[2,2](a22)=a22ss,D[2,2](a21)=a21ss,D[1](u)=ur,D[1](v)=vr,vv):
 RETURN(vv):
end:


# ----------------------------------------------------------


# ******************** START ***************************

div:= D[1](a11*u+a12*v)+D[2](a21*u+a22*v):

divr := subs(D[1,2](u)=ursa,D[1,2](v)=vrsa,D[1](div)):
divs := subs(D[1,2](u)=ursa,D[1,2](v)=vrsa,D[2](div)):

mixed := solve({divr=0, divs=0},{ursa,vrsa}):
assign(mixed);

ursa := subs(D[1,2](u)=urs,D[1,2](v)=vrs,D[2,2](u)=uss,D[2,2](v)=vss,D[2](u)=us,D[2](v)=vs,D[1,1](u)=urr,D[1,1](v)=vrr,ursa):
vrsa := subs(D[1,2](u)=urs,D[1,2](v)=vrs,D[2,2](u)=uss,D[2,2](v)=vss,D[2](u)=us,D[2](v)=vs,D[1,1](u)=urr,D[1,1](v)=vrr,vrsa):

ursa := substitutePartials(ursa):
vrsa := substitutePartials(vrsa):


printf("ursa=%s\n\n",convert(ursa,string)):
printf("vrsa=%s\n\n",convert(vrsa,string)):

printf("\n  u_{rs}="): latex(ursa); printf("\n"):
printf("\n  v_{rs}="): latex(vrsa); printf("\n"):


ursa := subs(u=u(i1,i2,i3,ex),v=u(i1,i2,i3,ey),ursa):
vrsa := subs(u=u(i1,i2,i3,ex),v=u(i1,i2,i3,ey),vrsa):

printf("ursa=%s\n\n",substituteValues(ursa)):
printf("vrsa=%s\n\n",substituteValues(vrsa)):



# restart; read "bc4v.maple";




