clear;

nvert:=6; # number of vertices
nt:=4; # number of triangles

xv:=array(1..nvert,1..2);

# for i from 1 to nv do
#   # vertices
#   xv[i]:=array(1..2);
# od;

element:=array(1..nt,1..3):
element[1,1]:=5: element[1,2]:=4: element[1,3]:=2: 
element[2,1]:=1: element[2,2]:=2: element[2,3]:=4: 
element[3,1]:=2: element[3,2]:=3: element[3,3]:=5: 
element[4,1]:=4: element[4,2]:=5: element[4,3]:=6: 

cc:=array(1..nt,1..2):  # cell centres

for i from 1 to nt do

  for n from 1 to 2 do
    cc[i,n]:=(xv[element[i,1],n]+xv[element[i,2],n]+xv[element[i,3],n])/3:
  od:

od:

print(cc[1,1]);

printf("cc[1]=( %a , %a)\n",cc[1,1],cc[1,2]);

# tangents to faces
nf:=3:

pv:=array(1..nf,1..2):
for n from 1 to 2 do
  pv[1,n]:=xv[4,n]-xv[5,n]:
  pv[2,n]:=xv[2,n]-xv[4,n]:
  pv[3,n]:=xv[5,n]-xv[2,n]:
od:
  
# normals to faces
nv:=array(1..nf,1..2):

for i from 1 to nf do
  nv[i,1]:= pv[i,2]:
  nv[i,2]:=-pv[i,1]:
od:

xc:=array(1..nvert,1..nvert,1..2): # centre between vertices
for i from 1 to nvert do
for j from 1 to nvert do
  for n from 1 to 2 do
    xc[i,j,n]:=(xv[i,n]+xv[j,n])/2:
  od:
od:
od:

sv:=array(1..nt,1..nt,1..2): # vectors joining cell centres

dw:=array(1..nt,1..nt,1..2):  # dw/ds sv
w:=array(1..nt):

for i from 1 to nt do
for j from 1 to nt do
  for n from 1 to 2 do
    sv[i,j,n]:=cc[i,n]-cc[j,n]:
    dw[i,j,n]:=(w[i]-w[j])*sv[i,j,n]:
  od:
od:
od:


dx:=1:
dy:=1:

xv[1,1]:=0*dx: xv[1,2]:=0*dy:
xv[2,1]:=1*dx: xv[2,2]:=0*dy:
xv[3,1]:=2*dx: xv[3,2]:=0*dy:
xv[4,1]:=0*dx: xv[4,2]:=1*dy:
xv[5,1]:=1*dx: xv[5,2]:=1*dy:
xv[6,1]:=0*dx: xv[6,2]:=2*dy:

for i from 1 to nt do
  printf("cc[%a,1..2]=( %a , %a)\n",i,cc[i,1],cc[i,2]);
od:

for i from 1 to nf do
  printf("nv[%a,1..2]=( %a , %a)\n",i,nv[i,1],nv[i,2]):
od:


for i from 1 to nt do
for j from i+1 to nt do
  printf("dw[%a,%a,1..2]=( %a , %a)\n",i,j,dw[i,j,1],dw[i,j,2]):
od:
od:



# solve w(x) = w0 + (x-x0)wx + (y-y0)wy


a:=array(1..3,1..3):
b:=array(1..3):

for f from 1 to 3 do # faces

  if f=1 then
    i0:=5: j0:=4: # vertices on the face
  elif f=2 then
    i0:=4: j0:=2: # vertices on the face
  else
    i0:=2: j0:=5: # vertices on the face
  fi:  

  for m from 1 to 2 do # 2 choices for determining the normal derivative
  
    if f=1 then
      if m=1 then
        nn:=array([1,4,3]): # cell centres to use
      else
        nn:=array([4,2,3]): # cell centres to use
      fi:
    elif f=2 then
      if m=1 then
        nn:=array([1,2,3]): # cell centres to use
      else
        nn:=array([2,3,4]): # cell centres to use
      fi:
    else
      if m=1 then
        nn:=array([1,3,4]): # cell centres to use
      else
        nn:=array([3,2,4]): # cell centres to use
      fi:
    fi:
  
    
    # Determine w0,wx,wy at the center of face joining the vertices: (i0,j0)
    
    printf(" face %a: xc[%a,%a,1..2]=( %a , %a)\n",f,i0,j0,xc[i0,j0,1],xc[i0,j0,2]):
    
    for i from 1 to 3 do
      a[i,1]:=1: 
      a[i,2]:=cc[nn[i],1]-xc[i0,j0,1]: 
      a[i,3]:=cc[nn[i],2]-xc[i0,j0,2]:
      b[i]:=w[nn[i]]:
    od:
    
    # ww:=array(1..3):
    ww[m]:=linsolve(a,b):
    
    printf(" face %a: w0=%a wx=%a wy=%a\n",f,ww[m][1],ww[m][2],ww[m][3]):
    
    printf(" face %a: wn=%a\n", f,nv[2,1]*ww[m][2]+nv[2,2]*ww[m][3] ):
  
  od:
  
  # normal derivative for face f
  wn[f]:=(1-alpha[f])*(nv[f,1]*ww[1][2]+nv[f,2]*ww[1][3])+alpha[f]*(nv[f,1]*ww[2][2]+nv[f,2]*ww[2][3]):

od:

alpha[1]:=1/2;
alpha[2]:=1/2;
alpha[3]:=1/2;


lap:=(wn[1]+wn[2]+wn[3])/(dx*dy/2); # divide by the area


for n from 1 to 2 do
for m from 1 to 2 do
  printf(" lap(x_%a^%a)=%a\n",n,m,simplify(subs(w[1]=cc[1,n]^m,w[2]=cc[2,n]^m,w[3]=cc[3,n]^m,w[4]=cc[4,n]^m,lap))):
od:
od:
printf(" lap(x*y)=%a\n",subs(w[1]=cc[1,1]*cc[1,2],w[2]=cc[2,1]*cc[2,2],w[3]=cc[3,1]*cc[3,2],w[4]=cc[4,1]*cc[4,2],lap)):
