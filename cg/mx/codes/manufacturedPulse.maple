# currentdir("/Users/henshaw/overtureFramework/cg/mx/codes");
# restart; read "manufacturedPulse.maple";
#
#  Compute the forcing term for Maxwells for a manufactured solution.
# 

# with(LinearAlgebra);
with(CodeGeneration):

kernelopts(printbytes=false): # turn off memory used messages

psi := amp*exp(-beta*( (x-x0-cx*t)^2 + (y-y0-cy*t)^2 ));


ex :=-(y-y0-cy*t)*psi; 
ey := (x-x0-cx*t)*psi;
hz := psi;

fex := diff(ex,t,t)-cSq*( diff(ex,x,x) + diff(ex,y,y)); 
fey := diff(ey,t,t)-cSq*( diff(ey,x,x) + diff(ey,y,y)); 
fhz := diff(hz,t,t)-cSq*( diff(hz,x,x) + diff(hz,y,y)); 

# mycode := C([PSI = psi, FEX = fex, FEY = fey, FHZ = fhz], defaulttype = float, deducetypes = false,output=string);
mycode := C([PSI = psi, FEX = fex, FEY = fey, FHZ = fhz], optimize, defaulttype = float, deducetypes = false,output=string);

# ------------------ 2D: Save file with forcings ------------------
fileName:="manufacturedPulseForcing2d.h":
file := fopen( fileName,WRITE ):

fprintf(file,"// File generated by overtureFramework/cg/mx/codes/manufacturedPulse.maple\n"):
fprintf(file,"// Ex = %s\n",convert(ex,string)):
fprintf(file,"// Ey = %s\n",convert(ey,string)):
fprintf(file,"// Hz = %s\n",convert(hz,string)):

fprintf(file,"real t2,t3,t5,t6,t9,PSI,t14,t16,t19,t20,t21,t23,t25,t27,t28,t30,t32,t35,t36,t38,t40,t41,t45,t46,t47,t54,t49,t61,t68,FEX,FEY,FHZ;\n");

fprintf(file,"%s\n",mycode);
fclose(file);

printf("Output written to file=[%s]\n",fileName);

# ------------------ 2D: Save file with forcings AND time derivatives ------------------
fext := diff(fex,t);
feyt := diff(fey,t);
fhzt := diff(fhz,t);

mycode := C([PSI = psi, FEX = fex, FEY = fey, FHZ = fhz, FEXT = fext, FEYT = feyt, FHZT = fhzt], optimize, defaulttype = float, deducetypes = false,output=string);

fileName:="manufacturedPulseForcingSosup2d.h":
file := fopen( fileName,WRITE ):

fprintf(file,"// File generated by overtureFramework/cg/mx/codes/manufacturedPulse.maple\n"):
fprintf(file,"// Ex = %s\n",convert(ex,string)):
fprintf(file,"// Ey = %s\n",convert(ey,string)):
fprintf(file,"// Hz = %s\n",convert(hz,string)):

fprintf(file,"real t2,t3,t5,t6,t9,t10,PSI,t14,t16,t19,t20,t21,t23,t25,t27,t28,t30,t32,t35,t36,t38,t40,t41,t42,t45,t46,t47,t51,t54,t57,t49,t61,t68,t83,t85,t88,t89,t91,t96,t100,t103,t105,t112,t116,t124,t140,t150,FEX,FEY,FHZ,FEXT,FEYT,FHZT;\n");

fprintf(file,"%s\n",mycode);
fclose(file);

printf("Output written to file=[%s]\n",fileName);


# ----------------------------- 3D -----------------------------------------

psi := amp*exp(-beta*( (x-x0-cx*t)^2 + (y-y0-cy*t)^2 + (z-z0-cy*t)^2  ));


ex := ((z-z0-cz*t)-(y-y0-cy*t))*psi;
ey := ((x-x0-cx*t)-(z-z0-cz*t))*psi;
ez := ((y-y0-cy*t)-(x-x0-cx*t))*psi;

fex := diff(ex,t,t)-cSq*( diff(ex,x,x) + diff(ex,y,y) + diff(ex,z,z)); 
fey := diff(ey,t,t)-cSq*( diff(ey,x,x) + diff(ey,y,y) + diff(ey,z,z)); 
fez := diff(ez,t,t)-cSq*( diff(ez,x,x) + diff(ez,y,y) + diff(ez,z,z)); 

# mycode := C([PSI = psi, FEX = fex, FEY = fey, FHZ = fhz], defaulttype = float, deducetypes = false,output=string);
mycode := C([PSI = psi, FEX = fex, FEY = fey, FEZ = fez], optimize, defaulttype = float, deducetypes = false,output=string):

# ------------------ 3D: Save file with forcings ------------------

fileName:="manufacturedPulseForcing3d.h":
file := fopen( fileName,WRITE ):

fprintf(file,"// File generated by overtureFramework/cg/mx/codes/manufacturedPulse.maple\n"):
fprintf(file,"// Ex = %s\n",convert(ex,string)):
fprintf(file,"// Ey = %s\n",convert(ey,string)):
fprintf(file,"// Ez = %s\n",convert(ez,string)):

# declare temp variables: t1,t2,...,t99
fprintf(file,"real t1"):
for m from 2 to 99 do 
  fprintf(file,",t%d",m):
end do:
fprintf(file,";\n"):

fprintf(file,"real PSI,FEX,FEY,FEZ;\n"):

fprintf(file,"%s\n",mycode):
fclose(file);

printf("Output written to file=[%s]\n",fileName);


# ------------------ 3D: Save file with forcings AND time derivatives ------------------

fext := diff(fex,t);
feyt := diff(fey,t);
fezt := diff(fez,t);

mycode := C([PSI = psi, FEX = fex, FEY = fey, FEZ = fez, FEXT = fext, FEYT = feyt, FEZT = fezt], optimize, defaulttype = float, deducetypes = false,output=string):

fileName:="manufacturedPulseForcingSosup3d.h":

file := fopen( fileName,WRITE ):

fprintf(file,"// File generated by overtureFramework/cg/mx/codes/manufacturedPulse.maple\n"):
fprintf(file,"// Ex = %s\n",convert(ex,string)):
fprintf(file,"// Ey = %s\n",convert(ey,string)):
fprintf(file,"// Ez = %s\n",convert(ez,string)):

# declare temp variables: t1,t2,...,t99
fprintf(file,"real t1"):
for m from 2 to 214 do 
  fprintf(file,",t%d",m):
end do:
fprintf(file,";\n"):

fprintf(file,"real PSI,FEX,FEY,FEZ,FEXT,FEYT,FEZT;\n"):

fprintf(file,"%s\n",mycode):
fclose(file);

printf("Output written to file=[%s]\n",fileName);