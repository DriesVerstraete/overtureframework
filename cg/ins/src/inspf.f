! This file automatically generated from inspf.bf with bpp.
! ========================================================================================================
! Assign the RHS for the pressure equation 
! ========================================================================================================


! These next include files will define the macros that will define the difference approximations
! The actual macro is called below
! Include "defineDiffOrder2f.h"
!** #Include "defineDiffNewerOrder2f.h"
!** #Include "defineDiffOrder4f.h"
c Define statement functions for difference approximations of order 2 
c Thsi file was generated by op/src/makeIncludeNew.p  
c Arguments: u,rx,dr,dx: names for the grid function, jacobian, unit square spacing and rectangular grid spacing
c To include derivatives of rx use OPTION=RX
c Arguments: u,rx,dr,dx: names for the grid function, jacobian, unit square spacing and rectangular grid spacing
c To include derivatives of rx use OPTION=RX


c Define statement functions for difference approximations of order 4 
c Thsi file was generated by op/src/makeIncludeNew.p  
c Arguments: u,rx,dr,dx: names for the grid function, jacobian, unit square spacing and rectangular grid spacing
c To include derivatives of rx use OPTION=RX
c Arguments: u,rx,dr,dx: names for the grid function, jacobian, unit square spacing and rectangular grid spacing
c To include derivatives of rx use OPTION=RX












! Define macros for the derivatives based on the dimension, order of accuracy and grid-type


! Return nuT and its first derivatives for SPAL

!$$$c Return nuT and its first derivatives for BL
!$$$#beginMacro getBaldwinLomaxEddyViscosityAndFirstDerivatives(DIM)
!$$$
!$$$  nuT = u(i1,i2,i3,nc)
!$$$
!$$$  nuTx=UX(nc)
!$$$  nuTy=UY(nc)
!$$$
!$$$  #If #DIM == "3" 
!$$$    nuTz=UZ(nc)
!$$$  #End
!$$$#endMacro


!$$$c Return nuT and its first derivatives for KE
!$$$#beginMacro getKEpsilonViscosityAndFirstDerivatives(DIM)
!$$$ k0=u(i1,i2,i3,kc)
!$$$ e0=u(i1,i2,i3,ec)
!$$$ nuT = nu + cMu*k0**2/e0
!$$$ k0x=UX(kc)
!$$$ e0x=UX(ec)
!$$$ nuTx=cMu*k0*( 2.*k0x*e0 - k0*e0x )/e0**2
!$$$ k0y=UY(kc)
!$$$ e0y=UY(ec)
!$$$ nuTy=cMu*k0*( 2.*k0y*e0 - k0*e0y )/e0**2
!$$$ #If #DIM == "3" 
!$$$  k0z=UZ(kc)
!$$$  e0z=UZ(ec)
!$$$  nuTz=cMu*k0*( 2.*k0z*e0 - k0*e0z )/e0**2
!$$$ #End
!$$$#endMacro

!$$$c Return the visco-plastic viscosity and its first derivatives for BL
!$$$#beginMacro getViscoPlasticViscosityAndFirstDerivatives(DIM)
!$$$
!$$$  nuT = u(i1,i2,i3,vsc)
!$$$  nuTx=UX(vsc)
!$$$  nuTy=UY(vsc)
!$$$
!$$$  #If #DIM == "3" 
!$$$    nuTz=UZ(vsc)
!$$$  #End
!$$$
!$$$#endMacro


! ========================================================================
!   Return the generic nonlinear viscosity and its first derivatives 
! =======================================================================



! ***********************************************************************************
!   This macro defines the statements that sets the pressure BC 
!   as the normal component of the momentum equation.
!   These statement are placed in a loop in the applyWallBC macro.
!
! OPTION: boundary : apply pressure BC on boundary in the "curl-curl" form
!         edge     : apply pressure BC on boundary in the normal form
! TYPE: INS, INSSPAL, INSBL, INSKE
! ADTYPE: noAD, AD2, AD4, AD24
! GRIDTYPE: rectangular, curvilinear
! DIM: 2,3
! AXIS: R,S,T
!
! ***********************************************************************************

! *******************************************************************************
!
! TYPE: INS, INSSPAL, INSBL, INSKE
! ADTYPE: noAD, AD2, AD4, AD24
! GRIDTYPE: rectangular, curvilinear
! ORDER: 2,4
! DIM: 2,3
! AXIS: R,S,T
! 
! *******************************************************************************



! *******************************************************************************
!  
! *******************************************************************************

! ============================================================================
! Define the turbulent eddy viscosity and derivatives for SPAL
! ============================================================================

! ============================================================================
! Define the turbulent eddy viscosity and derivatives for BL
! ============================================================================

! ============================================================================
! Define the dervatives needed for the visco plastic model
! ============================================================================


! ============================================================================
! Define the turbulent eddy viscosity and derivatives for KE
! ============================================================================





! ************************************************************************************
!   This macro is used to fill in the RHS f(i1,i2,i3) for the pressure equation
!   for equations in the interior
!
!  TYPE: INS, INSSPAL, INSBL, INSKE
!
! ************************************************************************************





! *************************************************************************
! ****** Header info for pressure RHS and pressure BC subroutines  ********
! *************************************************************************




!$$$#beginMacro applyBcByArtificialDissipation(TYPE,DIM,ORDER)
!$$$ if( includeADinPressure.eq.1 )then
!$$$   if( use2ndOrderAD.eq.1 .and. use4thOrderAD.eq.0 ) then
!$$$     applyBcByGridType(TYPE,AD2,ORDER,DIM)
!$$$   else if( use2ndOrderAD.eq.0 .and. use4thOrderAD.eq.1 ) then
!$$$     applyBcByGridType(TYPE,AD4,ORDER,DIM)
!$$$   else if( use2ndOrderAD.eq.1 .and. use4thOrderAD.eq.1 ) then
!$$$     applyBcByGridType(TYPE,AD24,ORDER,DIM)
!$$$   end if
!$$$ end if
!$$$ if( includeADinPressure.eq.0 .or. (use2ndOrderAD.eq.0 .and. use4thOrderAD.eq.0 ) )then
!$$$   applyBcByGridType(TYPE,noAD,ORDER,DIM)
!$$$ end if
!$$$#endMacro

!******************************************************************************
!  Here is the main macro for filling in all the different cases
!******************************************************************************

! *******************************************************************************
!   Macro to assign the TRACTION (including free surface) BC on the pressure
! *******************************************************************************


! *******************************************************************************
!
! TYPE: INS, INSSPAL, INSBL
! ADTYPE: noAD, AD2, AD4, AD24
! GRIDTYPE: rectangular, curvilinear
! ORDER: 2,4
! DIM: 2,3
! AXIS: R,S,T
! 
! *******************************************************************************

! *******************************************************************************
!  Null version
! *******************************************************************************

      subroutine assignPressureRHSOpt(nd,
     & n1a,n1b,n2a,n2b,n3a,n3b,
     & nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,nd4a,nd4b,
     & mask,xy,rsxy,radiusInverse,  u,uu,f,gv,divDamping,udf,  bc, 
     & indexRange, ndb, bcData,
     & nr1a,nr1b,nr2a,nr2b,nr3a,nr3b,
     & normal00,normal10,normal01,normal11,normal02,normal12,
     & dim, bcf0,bcOffset,addBoundaryForcing,
     & ipar, rpar, ierr )
!======================================================================
!   Assign the RHS for the pressure equations.
!     OPTIMIZED version for rectangular grids.
!
! nd : number of space dimensions
!
! bc (input) : NOTE this is a special bc array with value defining the various pressure BC's
!
! NOTE:
!   u==uu for a non-moving grid. For a moving grid, uu is a temp space to hold u-gv
!======================================================================
      implicit none
      integer nd, n1a,n1b,n2a,n2b,n3a,n3b,
     & nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,nd4a,nd4b,ndb
      integer nr1a,nr1b,nr2a,nr2b,nr3a,nr3b

      real u(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b,nd4a:nd4b)
      real uu(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b,nd4a:nd4b)
      real f(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b)
      real gv(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b,0:nd-1)
      real divDamping(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b)
      real udf(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b,nd4a:*)          ! user defined force
      real xy(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b,0:nd-1)
      real rsxy(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b,0:nd-1,0:nd-1)
      real radiusInverse(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b)
      real bcData(0:ndb-1,0:1,0:2)

      real normal00(nr1a:nr1a,nd2a:nd2b,nd3a:nd3b,0:*)
      real normal10(nr1b:nr1b,nd2a:nd2b,nd3a:nd3b,0:*)
      real normal01(nd1a:nd1b,nr2a:nr2a,nd3a:nd3b,0:*)
      real normal11(nd1a:nd1b,nr2b:nr2b,nd3a:nd3b,0:*)
      real normal02(nd1a:nd1b,nd2a:nd2b,nr3a:nr3a,0:*)
      real normal12(nd1a:nd1b,nd2a:nd2b,nr3b:nr3b,0:*)

      integer mask(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b)
      integer bc(0:1,0:2),indexRange(0:1,0:2), ierr

      integer ipar(0:*)
      real rpar(0:*)

      ! -- variables for boundary forcing (bcData)
      integer dim(0:1,0:2,0:1,0:2), addBoundaryForcing(0:1,0:2)
      real bcf0(0:*)
      integer*8 bcOffset(0:1,0:2)

!     ---- local variables -----
      integer c,i1,i2,i3,orderOfAccuracy,gridIsMoving,useWhereMask
      integer isAxisymmetric,pressureBC,gridType,
     & initialConditionsAreBeingProjected
      integer pc,uc,vc,wc,tc,nc,grid,numberOfComponents
      real advectionCoefficient


      integer rectangular,curvilinear
      parameter( rectangular=0, curvilinear=1 )

      integer turbulenceModel,noTurbulenceModel
      integer baldwinLomax,spalartAllmaras,kEpsilon,kOmega,
     & largeEddySimulation
      parameter (noTurbulenceModel=0,baldwinLomax=1,kEpsilon=2,
     & kOmega=3,spalartAllmaras=4,largeEddySimulation=5 )

      integer pdeModel,standardModel,BoussinesqModel,viscoPlasticModel,
     & twoPhaseFlowModel
      parameter( standardModel=0,BoussinesqModel=1,viscoPlasticModel=2,
     & twoPhaseFlowModel=3 )

      ierr=0
      ! write(*,*) 'Inside assignPressureRHSOpt'

      pc                   =ipar(0)
      uc                   =ipar(1)
      vc                   =ipar(2)
      wc                   =ipar(3)
      tc                   =ipar(4) ! **new**
      nc                   =ipar(5)
      grid                 =ipar(6)
      orderOfAccuracy      =ipar(7)
      gridIsMoving         =ipar(8)
      useWhereMask         =ipar(9)
      isAxisymmetric       =ipar(10)
      pressureBC           =ipar(11)
      numberOfComponents   =ipar(12)
      gridType             =ipar(13)
      turbulenceModel      =ipar(14)

      pdeModel             =ipar(19)

      initialConditionsAreBeingProjected=ipar(23)

      advectionCoefficient=rpar(7)

      if( orderOfAccuracy.ne.2 .and. orderOfAccuracy.ne.4 )then
        write(*,'("assignPressureRHSOpt:ERROR orderOfAccuracy=",i6)') 
     & orderOfAccuracy
        stop 1
      end if
      if( gridType.ne.rectangular .and. gridType.ne.curvilinear )then
        write(*,'("assignPressureRHSOpt:ERROR gridType=",i6)') gridType
        stop 2
      end if
      if( numberOfComponents.le.nd )then
        write(*,'("assignPressureRHSOpt:ERROR nd,numberOfComponents=",
     & 2i6)') nd,numberOfComponents
        ! '
        stop 3
      end if
      if( uc.lt.0 .or. vc.lt.0 .or. (nd.eq.3 .and. wc.lt.0) )then
        write(*,'("assignPressureRHSOpt:ERROR uc,vc,ws=",2i6)') uc,vc,
     & wc
        stop 4
      end if
      if( initialConditionsAreBeingProjected.lt.0 .or. 
     & initialConditionsAreBeingProjected.gt.1 )then
        write(*,'("assignPressureRHSOpt:ERROR 
     & initialConditionsAreBeingProjected=",i6)') 
     & initialConditionsAreBeingProjected
        ! '
        stop 4
      end if

      if( gridIsMoving.ne.0 )then
        ! compute uu = u -gv    *wdh* 080418  added advectionCoefficient here instead of above
        if( nd.eq.2 )then
            do i3=n3a,n3b
            do i2=n2a,n2b
            do i1=n1a,n1b
              if( mask(i1,i2,i3).ne.0 )then
            uu(i1,i2,i3,uc)=advectionCoefficient*u(i1,i2,i3,uc)-gv(i1,
     & i2,i3,0)
            uu(i1,i2,i3,vc)=advectionCoefficient*u(i1,i2,i3,vc)-gv(i1,
     & i2,i3,1)
              end if
            end do
            end do
            end do
        else if( nd.eq.3 )then
            do i3=n3a,n3b
            do i2=n2a,n2b
            do i1=n1a,n1b
              if( mask(i1,i2,i3).ne.0 )then
            uu(i1,i2,i3,uc)=advectionCoefficient*u(i1,i2,i3,uc)-gv(i1,
     & i2,i3,0)
            uu(i1,i2,i3,vc)=advectionCoefficient*u(i1,i2,i3,vc)-gv(i1,
     & i2,i3,1)
            uu(i1,i2,i3,wc)=advectionCoefficient*u(i1,i2,i3,wc)-gv(i1,
     & i2,i3,2)
              end if
            end do
            end do
            end do
        else
          stop 11
        end if
      end if

!     *********** assign interior forcing ******************    

      ! when the advectionCoefficient==0 we are projecting the initial conditions and we 
      ! only need to include the div-damping term.
      ! *wdh* 080418 if( turbulenceModel.eq.noTurbulenceModel .or. advectionCoefficient.eq.0. )then
      if( turbulenceModel.eq.noTurbulenceModel .or. 
     & initialConditionsAreBeingProjected.eq.1 )then
!          *********************************************************
!          ***********No turbulence model***************************
!          *********************************************************
       if( pdeModel.eq.standardModel .or. pdeModel.eq.BoussinesqModel )
     & then
        if( orderOfAccuracy.eq.2 )then
          if( nd.eq.2 )then
            call assignPressureRhsINS22(nd,n1a,n1b,n2a,n2b,n3a,n3b,
     & nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,nd4a,nd4b,mask,xy,rsxy,
     & radiusInverse,  u,uu,f,gv,divDamping,udf,  bc, indexRange, ndb,
     &  bcData, nr1a,nr1b,nr2a,nr2b,nr3a,nr3b,normal00,normal10,
     & normal01,normal11,normal02,normal12, dim,bcf0,bcOffset,
     & addBoundaryForcing, ipar, rpar, ierr )
           else
            call assignPressureRhsINS23(nd,n1a,n1b,n2a,n2b,n3a,n3b,
     & nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,nd4a,nd4b,mask,xy,rsxy,
     & radiusInverse,  u,uu,f,gv,divDamping,udf,  bc, indexRange, ndb,
     &  bcData, nr1a,nr1b,nr2a,nr2b,nr3a,nr3b,normal00,normal10,
     & normal01,normal11,normal02,normal12, dim,bcf0,bcOffset,
     & addBoundaryForcing, ipar, rpar, ierr )
           end if
         else if( orderOfAccuracy.eq.4 )then
          if( nd.eq.2 )then
            call assignPressureRhsINS42(nd,n1a,n1b,n2a,n2b,n3a,n3b,
     & nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,nd4a,nd4b,mask,xy,rsxy,
     & radiusInverse,  u,uu,f,gv,divDamping,udf,  bc, indexRange, ndb,
     &  bcData, nr1a,nr1b,nr2a,nr2b,nr3a,nr3b,normal00,normal10,
     & normal01,normal11,normal02,normal12, dim,bcf0,bcOffset,
     & addBoundaryForcing, ipar, rpar, ierr )
           else
            call assignPressureRhsINS43(nd,n1a,n1b,n2a,n2b,n3a,n3b,
     & nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,nd4a,nd4b,mask,xy,rsxy,
     & radiusInverse,  u,uu,f,gv,divDamping,udf,  bc, indexRange, ndb,
     &  bcData, nr1a,nr1b,nr2a,nr2b,nr3a,nr3b,normal00,normal10,
     & normal01,normal11,normal02,normal12, dim,bcf0,bcOffset,
     & addBoundaryForcing, ipar, rpar, ierr )
           end if
         else
           stop 111
         end if

       else if( pdeModel.eq.viscoPlasticModel )then
        ! new way : all turbulence models can use this generic one ---

        if( orderOfAccuracy.eq.2 )then
          if( nd.eq.2 )then
            call assignPressureRhsINSVP22(nd,n1a,n1b,n2a,n2b,n3a,n3b,
     & nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,nd4a,nd4b,mask,xy,rsxy,
     & radiusInverse,  u,uu,f,gv,divDamping,udf,  bc, indexRange, ndb,
     &  bcData, nr1a,nr1b,nr2a,nr2b,nr3a,nr3b,normal00,normal10,
     & normal01,normal11,normal02,normal12, dim,bcf0,bcOffset,
     & addBoundaryForcing, ipar, rpar, ierr )
           else
            call assignPressureRhsINSVP23(nd,n1a,n1b,n2a,n2b,n3a,n3b,
     & nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,nd4a,nd4b,mask,xy,rsxy,
     & radiusInverse,  u,uu,f,gv,divDamping,udf,  bc, indexRange, ndb,
     &  bcData, nr1a,nr1b,nr2a,nr2b,nr3a,nr3b,normal00,normal10,
     & normal01,normal11,normal02,normal12, dim,bcf0,bcOffset,
     & addBoundaryForcing, ipar, rpar, ierr )
           end if
         else if( orderOfAccuracy.eq.4 )then
          if( nd.eq.2 )then
            call assignPressureRhsINSVP42(nd,n1a,n1b,n2a,n2b,n3a,n3b,
     & nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,nd4a,nd4b,mask,xy,rsxy,
     & radiusInverse,  u,uu,f,gv,divDamping,udf,  bc, indexRange, ndb,
     &  bcData, nr1a,nr1b,nr2a,nr2b,nr3a,nr3b,normal00,normal10,
     & normal01,normal11,normal02,normal12, dim,bcf0,bcOffset,
     & addBoundaryForcing, ipar, rpar, ierr )
           else
            call assignPressureRhsINSVP43(nd,n1a,n1b,n2a,n2b,n3a,n3b,
     & nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,nd4a,nd4b,mask,xy,rsxy,
     & radiusInverse,  u,uu,f,gv,divDamping,udf,  bc, indexRange, ndb,
     &  bcData, nr1a,nr1b,nr2a,nr2b,nr3a,nr3b,normal00,normal10,
     & normal01,normal11,normal02,normal12, dim,bcf0,bcOffset,
     & addBoundaryForcing, ipar, rpar, ierr )
            stop 5524
           end if
         else
           stop 213
         end if

       else if( pdeModel.eq.twoPhaseFlowModel  )then

        if( orderOfAccuracy.eq.2 )then
          if( nd.eq.2 )then
            call assignPressureRhsINSTP22(nd,n1a,n1b,n2a,n2b,n3a,n3b,
     & nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,nd4a,nd4b,mask,xy,rsxy,
     & radiusInverse,  u,uu,f,gv,divDamping,udf,  bc, indexRange, ndb,
     &  bcData, nr1a,nr1b,nr2a,nr2b,nr3a,nr3b,normal00,normal10,
     & normal01,normal11,normal02,normal12, dim,bcf0,bcOffset,
     & addBoundaryForcing, ipar, rpar, ierr )
           else
            call assignPressureRhsINSTP23(nd,n1a,n1b,n2a,n2b,n3a,n3b,
     & nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,nd4a,nd4b,mask,xy,rsxy,
     & radiusInverse,  u,uu,f,gv,divDamping,udf,  bc, indexRange, ndb,
     &  bcData, nr1a,nr1b,nr2a,nr2b,nr3a,nr3b,normal00,normal10,
     & normal01,normal11,normal02,normal12, dim,bcf0,bcOffset,
     & addBoundaryForcing, ipar, rpar, ierr )
           end if
         else if( orderOfAccuracy.eq.4 )then
          if( nd.eq.2 )then
!            call assignPressureRhsINSTP42(nd,n1a,n1b,n2a,n2b,n3a,n3b,nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,nd4a,nd4b,!             mask,xy,rsxy,radiusInverse,  u,uu,f,gv,divDamping,udf,  bc, indexRange, ndb, bcData, nr1a,nr1b,nr2a,nr2b,nr3a,nr3b,!             normal00,normal10,normal01,normal11,normal02,normal12, dim,bcf0,bcOffset,addBoundaryForcing, ipar, rpar, ierr )
             stop 5524
           else
!            call assignPressureRhsINSTP43(nd,n1a,n1b,n2a,n2b,n3a,n3b,nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,nd4a,nd4b,!             mask,xy,rsxy,radiusInverse,  u,uu,f,gv,divDamping,udf,  bc, indexRange, ndb, bcData, nr1a,nr1b,nr2a,nr2b,nr3a,nr3b,!             normal00,normal10,normal01,normal11,normal02,normal12, dim,bcf0,bcOffset,addBoundaryForcing, ipar, rpar, ierr )
            stop 5524
           end if
         else
           stop 213
         end if

       else
         write(*,'(" ERROR: unknown pdeModel")')
         stop 8823
       end if

      else if( turbulenceModel.eq.spalartAllmaras )then
!          *********************************************************
!          ********spalartAllmaras turbulence model*****************
!          *********************************************************

        if( orderOfAccuracy.eq.2 )then
          if( nd.eq.2 )then
            call assignPressureRhsINSSPAL22(nd,n1a,n1b,n2a,n2b,n3a,n3b,
     & nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,nd4a,nd4b,mask,xy,rsxy,
     & radiusInverse,  u,uu,f,gv,divDamping,udf,  bc, indexRange, ndb,
     &  bcData, nr1a,nr1b,nr2a,nr2b,nr3a,nr3b,normal00,normal10,
     & normal01,normal11,normal02,normal12, dim,bcf0,bcOffset,
     & addBoundaryForcing, ipar, rpar, ierr )
           else
            call assignPressureRhsINSSPAL23(nd,n1a,n1b,n2a,n2b,n3a,n3b,
     & nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,nd4a,nd4b,mask,xy,rsxy,
     & radiusInverse,  u,uu,f,gv,divDamping,udf,  bc, indexRange, ndb,
     &  bcData, nr1a,nr1b,nr2a,nr2b,nr3a,nr3b,normal00,normal10,
     & normal01,normal11,normal02,normal12, dim,bcf0,bcOffset,
     & addBoundaryForcing, ipar, rpar, ierr )
           end if
         else
           stop 111
         end if

      else if( turbulenceModel.eq.baldwinLomax .or. 
     & turbulenceModel.eq.kEpsilon .or. 
     & turbulenceModel.eq.largeEddySimulation  )then
!          *********************************************************
!          ********Generic turbulence model: BL, KE   **************
!          *********************************************************
        ! new way : all turbulence models can use this generic one (VP) ---

        if( orderOfAccuracy.eq.2 )then
          if( nd.eq.2 )then
            call assignPressureRhsINSVP22(nd,n1a,n1b,n2a,n2b,n3a,n3b,
     & nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,nd4a,nd4b,mask,xy,rsxy,
     & radiusInverse,  u,uu,f,gv,divDamping,udf,  bc, indexRange, ndb,
     &  bcData, nr1a,nr1b,nr2a,nr2b,nr3a,nr3b,normal00,normal10,
     & normal01,normal11,normal02,normal12, dim,bcf0,bcOffset,
     & addBoundaryForcing, ipar, rpar, ierr )
           else
            call assignPressureRhsINSVP23(nd,n1a,n1b,n2a,n2b,n3a,n3b,
     & nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,nd4a,nd4b,mask,xy,rsxy,
     & radiusInverse,  u,uu,f,gv,divDamping,udf,  bc, indexRange, ndb,
     &  bcData, nr1a,nr1b,nr2a,nr2b,nr3a,nr3b,normal00,normal10,
     & normal01,normal11,normal02,normal12, dim,bcf0,bcOffset,
     & addBoundaryForcing, ipar, rpar, ierr )
           end if
         else if( orderOfAccuracy.eq.4 )then
          if( nd.eq.2 )then
            call assignPressureRhsINSVP42(nd,n1a,n1b,n2a,n2b,n3a,n3b,
     & nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,nd4a,nd4b,mask,xy,rsxy,
     & radiusInverse,  u,uu,f,gv,divDamping,udf,  bc, indexRange, ndb,
     &  bcData, nr1a,nr1b,nr2a,nr2b,nr3a,nr3b,normal00,normal10,
     & normal01,normal11,normal02,normal12, dim,bcf0,bcOffset,
     & addBoundaryForcing, ipar, rpar, ierr )
           else
            call assignPressureRhsINSVP43(nd,n1a,n1b,n2a,n2b,n3a,n3b,
     & nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,nd4a,nd4b,mask,xy,rsxy,
     & radiusInverse,  u,uu,f,gv,divDamping,udf,  bc, indexRange, ndb,
     &  bcData, nr1a,nr1b,nr2a,nr2b,nr3a,nr3b,normal00,normal10,
     & normal01,normal11,normal02,normal12, dim,bcf0,bcOffset,
     & addBoundaryForcing, ipar, rpar, ierr )
           end if
         else
           stop 213
         end if


!$$$
!$$$        if( orderOfAccuracy.eq.2 )then
!$$$          if( nd.eq.2 )then
!$$$            call assignPressureRhsINSBL22(nd,n1a,n1b,n2a,n2b,n3a,n3b,nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,nd4a,nd4b,!$$$             mask,xy,rsxy,radiusInverse,  u,uu,f,gv,divDamping,udf,  bc, indexRange, ndb, bcData, nr1a,nr1b,nr2a,nr2b,nr3a,nr3b,!$$$             normal00,normal10,normal01,normal11,normal02,normal12, dim,bcf0,bcOffset,addBoundaryForcing, ipar, rpar, ierr )
!$$$           else
!$$$            call assignPressureRhsINSBL23(nd,n1a,n1b,n2a,n2b,n3a,n3b,nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,nd4a,nd4b,!$$$             mask,xy,rsxy,radiusInverse,  u,uu,f,gv,divDamping,udf,  bc, indexRange, ndb, bcData, nr1a,nr1b,nr2a,nr2b,nr3a,nr3b,!$$$             normal00,normal10,normal01,normal11,normal02,normal12, dim,bcf0,bcOffset,addBoundaryForcing, ipar, rpar, ierr )
!$$$           end if
!$$$         else
!$$$           stop 111
!$$$         end if

!$$$      else if( turbulenceModel.eq.kEpsilon )then
!$$$c          *********************************************************
!$$$c          ********kEpsilon turbulence model*****************
!$$$c          *********************************************************
!$$$
!$$$        if( orderOfAccuracy.eq.2 )then
!$$$          if( nd.eq.2 )then
!$$$            call assignPressureRhsINSKE22(nd,n1a,n1b,n2a,n2b,n3a,n3b,nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,nd4a,nd4b,!$$$             mask,xy,rsxy,radiusInverse,  u,uu,f,gv,divDamping,udf,  bc, indexRange, ndb, bcData, nr1a,nr1b,nr2a,nr2b,nr3a,nr3b,!$$$             normal00,normal10,normal01,normal11,normal02,normal12, dim,bcf0,bcOffset,addBoundaryForcing, ipar, rpar, ierr )
!$$$           else
!$$$            call assignPressureRhsINSKE23(nd,n1a,n1b,n2a,n2b,n3a,n3b,nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,nd4a,nd4b,!$$$             mask,xy,rsxy,radiusInverse,  u,uu,f,gv,divDamping,udf,  bc, indexRange, ndb, bcData, nr1a,nr1b,nr2a,nr2b,nr3a,nr3b,!$$$             normal00,normal10,normal01,normal11,normal02,normal12, dim,bcf0,bcOffset,addBoundaryForcing, ipar, rpar, ierr )
!$$$           end if
!$$$         else
!$$$           stop 111
!$$$         end if

      else
        write(*,'("inspf:ERROR: turbulenceModel=",i6," not 
     & implemented")') turbulenceModel
        ! '
        stop 62

      end if


      return
      end


! ***************************************************************
!   Build different versions of the pressure function
!  Also build "null" versions" for use when we don't want the option
! ***************************************************************

!t:  temporarily turn off the building of these files 
!     Here we create subroutines in separate files to define the pressure BC
      ! order=2, 2d and 3d
      ! order=4

      ! *************** SPAL ***************************
      ! order=2
      ! order=4
!     buildFunction(inspINSSPAL42,INSSPAL,4,2)
!     buildFunction(inspINSSPAL43,INSSPAL,4,3)

      ! *************** BL ***************************
      ! order=2
!      buildFunction(inspINSBL22,INSBL,2,2)
!      buildFunction(inspINSBL23,INSBL,2,3)
      ! order=4
!     buildFunction(inspINSBL42,INSBL,4,2)
!     buildFunction(inspINSBL43,INSBL,4,3)

      ! *************** KE ***************************
      ! order=2
!      buildFunction(inspINSKE22,INSKE,2,2)
!      buildFunction(inspINSKE23,INSKE,2,3)

!t ---

      ! *************** Visco-plastic ***************************
      ! order=2
      ! order=4 

      ! *************** Variable density INS ***************************
