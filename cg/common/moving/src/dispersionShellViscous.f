! This file was generated by fis/codes/exact.maple
! Exact solution for a viscous incompressible flow and shell model (2 DOF) 

      subroutine dispersionShell2(wr,wi, detr,deti,  rho,mu,H,k,
     &                            rhos,hs,Ks,Ts,eta1Varies )
      implicit none 
      complex II,w,G,a,det,Ca,Sa,gam,dadw,dgdw,dgamdw 
      complex dCadw,dSadw,aH,z,cosh,sinh 
      real rho,mu,H,k,rhos,hs,eta1Varies,rhoshs,Ks,Ts
      real wr,wi,detr,deti,Ck,Sk
      ! cosh(z) =(exp(z)+exp(-z))*.5
      ! sinh(z) =(exp(z)-exp(-z))*.5
      cosh(z) = cmplx(dcosh(real(z))*cos(imag(z)),
     &                dsinh(real(z))*sin(imag(z)))
      sinh(z) = cmplx(dsinh(real(z))*cos(imag(z)),
     &                dcosh(real(z))*sin(imag(z)))
      w=cmplx(wr,wi)
      rhoshs=rhos*hs
      II=(0.,1.)
      a = sqrt(k ** 2 - II * rho * w / mu)
      Ck=dcosh(k*H)
      Sk=dsinh(k*H)
      aH=a*H
      Ca=cosh(aH)
      Sa=sinh(aH)
      gam = w ** 2 * rho + 2 * II * w * mu * k ** 2
      G = Ks + Ts * k ** 2 - rhoshs * w ** 2
      det = (-Sa * k ** 3 * Sk - Sk * a ** 2 * k * Sa - 2 * a * k ** 2 +
     # 2 * a * k ** 2 * Ck * Ca) * G + II * Sk * a ** 3 * k * Ca * w * e
     #ta1Varies * mu - II * k ** 2 * Ck * Sa * w * eta1Varies * mu * a *
     #* 2 + II * k ** 4 * Ck * Sa * w * eta1Varies * mu - II * Sk * a * 
     #k ** 3 * Ca * w * eta1Varies * mu - gam * k * a * Ca * Sk + a ** 2
     # * gam * Ck * Sa + 2 * II * w * k ** 3 * mu * a * Ca * Sk - 2 * II
     # * a ** 2 * w * mu * k ** 2 * Ck * Sa + (-2 * a ** 3 * k ** 2 * w 
     #** 2 * mu ** 2 * eta1Varies - 2 * a * k ** 4 * w ** 2 * mu ** 2 * 
     #eta1Varies - 4 * w ** 2 * k ** 3 * Sa * mu ** 2 * eta1Varies * a *
     #* 2 * Sk + II * gam * k * Sa * w * eta1Varies * mu * a ** 2 * Sk +
     # 4 * a * w ** 2 * mu ** 2 * k ** 4 * Ck * Ca * eta1Varies + 2 * II
     # * gam * k ** 2 * a * w * eta1Varies * mu - II * a ** 3 * gam * Ck
     # * Ca * w * eta1Varies * mu - II * a * gam * Ck * Ca * w * eta1Var
     #ies * mu * k ** 2 + II * gam * k ** 3 * Sa * w * eta1Varies * mu *
     # Sk) / G
      detr=real(det)
      deti=imag(det)
      return
      end

      subroutine dispersionShell2deriv(wr,wi, dwr,dwi,  rho,mu,H,k,
     &                                 rhos,hs,Ks,Ts,eta1Varies )
      implicit none 
      complex II,w,G,a,dw,Ca,Sa,gam,dadw,dgdw,dgamdw 
      complex dCadw,dSadw,aH,z,cosh,sinh 
      real rho,mu,H,k,rhos,hs,eta1Varies,rhoshs,Ks,Ts
      real wr,wi, dwr,dwi,Ck,Sk
      ! cosh(z) =(exp(z)+exp(-z))*.5
      ! sinh(z) =(exp(z)-exp(-z))*.5
      cosh(z) = cmplx(dcosh(real(z))*cos(imag(z)),
     &                dsinh(real(z))*sin(imag(z)))
      sinh(z) = cmplx(dsinh(real(z))*cos(imag(z)),
     &                dcosh(real(z))*sin(imag(z)))
      w=cmplx(wr,wi)
      rhoshs=rhos*hs
      II=(0.,1.)
      a = sqrt(k ** 2 - II * rho * w / mu)
      Ck=dcosh(k*H)
      Sk=dsinh(k*H)
      aH=a*H
      Ca=cosh(aH)
      Sa=sinh(aH)
      dadw = -II * rho / mu / a / 0.2D1
      dCadw = Sa * H * dadw
      dSadw = Ca * H * dadw
      gam = w ** 2 * rho + 2 * II * w * mu * k ** 2
      dgamdw = 2 * rho * w + 2 * II * mu * k ** 2
      G = Ks + Ts * k ** 2 - rhoshs * w ** 2
      dGdw = -2 * rhoshs * w
      dw = II * Sk * a ** 3 * k * Ca * eta1Varies * mu - II * k ** 2 * C
     #k * Sa * eta1Varies * mu * a ** 2 + II * k ** 4 * Ck * Sa * eta1Va
     #ries * mu - II * Sk * a * k ** 3 * Ca * eta1Varies * mu + 2 * II *
     # k ** 3 * mu * a * Ca * Sk - 2 * II * a ** 2 * mu * k ** 2 * Ck * 
     #Sa + (-4 * a ** 3 * k ** 2 * w * mu ** 2 * eta1Varies - 4 * a * k 
     #** 4 * w * mu ** 2 * eta1Varies - 8 * w * k ** 3 * Sa * mu ** 2 * 
     #eta1Varies * a ** 2 * Sk + II * gam * k * Sa * eta1Varies * mu * a
     # ** 2 * Sk + 8 * a * w * mu ** 2 * k ** 4 * Ck * Ca * eta1Varies +
     # 2 * II * gam * k ** 2 * a * eta1Varies * mu - II * a ** 3 * gam *
     # Ck * Ca * eta1Varies * mu - II * a * gam * Ck * Ca * eta1Varies *
     # mu * k ** 2 + II * gam * k ** 3 * Sa * eta1Varies * mu * Sk) / G 
     #+ ((-2 * Sk * a * k * Sa - 2 * k ** 2 + 2 * k ** 2 * Ck * Ca) * G 
     #+ 3 * II * Sk * a ** 2 * k * Ca * w * eta1Varies * mu - 2 * II * k
     # ** 2 * Ck * Sa * w * eta1Varies * mu * a - II * Sk * k ** 3 * Ca 
     #* w * eta1Varies * mu - gam * k * Ca * Sk + 2 * Sa * a * gam * Ck 
     #+ 2 * II * w * k ** 3 * mu * Ca * Sk - 4 * II * Sa * a * w * mu * 
     #k ** 2 * Ck + (-6 * a ** 2 * k ** 2 * w ** 2 * mu ** 2 * eta1Varie
     #s - 2 * k ** 4 * w ** 2 * mu ** 2 * eta1Varies - 8 * w ** 2 * k **
     # 3 * Sa * mu ** 2 * eta1Varies * a * Sk + 2 * II * gam * k * Sa * 
     #w * eta1Varies * mu * a * Sk + 4 * w ** 2 * mu ** 2 * k ** 4 * Ck 
     #* Ca * eta1Varies + 2 * II * gam * k ** 2 * w * eta1Varies * mu - 
     #3 * II * a ** 2 * gam * Ck * Ca * w * eta1Varies * mu - II * gam *
     # Ck * Ca * w * eta1Varies * mu * k ** 2) / G) * dadw + (-a * Ca * 
     #k * Sk + a ** 2 * Ck * Sa + (II * k ** 3 * Sa * eta1Varies * mu * 
     #w * Sk + 2 * II * k ** 2 * a * eta1Varies * mu * w - II * a * Ck *
     # Ca * eta1Varies * mu * k ** 2 * w - II * a ** 3 * Ck * Ca * eta1V
     #aries * mu * w + II * k * Sa * eta1Varies * mu * a ** 2 * w * Sk) 
     #/ G) * dgamdw + (2 * a * k ** 2 * Ck * G + II * Sk * a ** 3 * k * 
     #w * eta1Varies * mu - II * Sk * a * k ** 3 * w * eta1Varies * mu -
     # gam * k * a * Sk + 2 * II * w * k ** 3 * mu * a * Sk + (4 * a * w
     # ** 2 * mu ** 2 * k ** 4 * Ck * eta1Varies - II * a ** 3 * gam * C
     #k * w * eta1Varies * mu - II * a * gam * Ck * w * eta1Varies * mu 
     #* k ** 2) / G) * dCadw + ((-k ** 3 * Sk - Sk * a ** 2 * k) * G - I
     #I * k ** 2 * Ck * w * eta1Varies * mu * a ** 2 + II * k ** 4 * Ck 
     #* w * eta1Varies * mu + a ** 2 * gam * Ck - 2 * II * a ** 2 * w * 
     #mu * k ** 2 * Ck + (-4 * w ** 2 * k ** 3 * mu ** 2 * eta1Varies * 
     #a ** 2 * Sk + II * gam * k * w * eta1Varies * mu * a ** 2 * Sk + I
     #I * gam * k ** 3 * w * eta1Varies * mu * Sk) / G) * dSadw + (-Sa *
     # k ** 3 * Sk - Sk * a ** 2 * k * Sa - 2 * a * k ** 2 + 2 * a * k *
     #* 2 * Ck * Ca - (-2 * a ** 3 * k ** 2 * w ** 2 * mu ** 2 * eta1Var
     #ies - 2 * a * k ** 4 * w ** 2 * mu ** 2 * eta1Varies - 4 * w ** 2 
     #* k ** 3 * Sa * mu ** 2 * eta1Varies * a ** 2 * Sk + II * gam * k 
     #* Sa * w * eta1Varies * mu * a ** 2 * Sk + 4 * a * w ** 2 * mu ** 
     #2 * k ** 4 * Ck * Ca * eta1Varies + 2 * II * gam * k ** 2 * a * w 
     #* eta1Varies * mu - II * a ** 3 * gam * Ck * Ca * w * eta1Varies *
     # mu - II * a * gam * Ck * Ca * w * eta1Varies * mu * k ** 2 + II *
     # gam * k ** 3 * Sa * w * eta1Varies * mu * Sk) / G ** 2) * dGdw
      dwr=real(dw)
      dwi=imag(dw)
      return
      end
